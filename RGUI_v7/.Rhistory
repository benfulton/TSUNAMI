# App title ----
# titlePanel("Choose GSE Data or Upload Your Own Data"),
singleton(
tags$head(tags$script(src = "message-handler.js"))
),
# Sidebar layout with input and output definitions ----
sidebarLayout(
position = "right",
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
h5("File uploader"),
fileInput("csvfile", "Choose File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Include clarifying text ----
helpText("Note: Maximum file size allowed for uploading is 300MB."),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
fluidRow(
# Input: Select separator ----
column(6, radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t",
Space = " "),
selected = ",")),
# Input: Select quotes ----
column(6, radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'))
),
# Horizontal line ----
tags$hr(),
actionButton("action2", "Confirm when Complete")
),
# Main panel for displaying outputs ----
mainPanel(
h5("NCBI GEO Data"),
tabsetPanel(
id = 'dataset',
tabPanel("Series", DT::dataTableOutput("mytable1"))
),
tags$script("$(document).on('click', '#mytable1 button', function () {
Shiny.onInputChange('dataset_lastClickId',this.id)
});")
)
)
),
tabPanel("2. Data Preprocessing",
# titlePanel("Verifying & Cleaning Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
position = "right",
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
h5("Choose Preview dimensions"),
helpText("Preview starting from the beginning to specific rows and columns."),
fluidRow(
column(6, numericInput("quicklook_row", "# of rows:", 100, step = 1, min = 1)),
column(6, numericInput("quicklook_col", "# of columns:", 10, step = 1, min = 1))
),
# Horizontal line ----
# tags$hr(),
h5("Verify starting column and row of expression data"),
helpText("This is assigner. Choose starting column and row for expression data. Index starting from 1."),
fluidRow(
column(6, numericInput("starting_row", "starting row:", 1, step = 1, min = 1)),
column(6, numericInput("starting_col", "starting column:", 2, step = 1, min = 1))
),
# Horizontal line ----
# tags$hr(),
h5("Verify Gene Symbol"),
helpText("We suppose Gene Symbol is in column 1."),
numericInput("starting_gene_row", "starting row:", 1, step = 1, min = 1),
# Horizontal line ----
tags$hr(),
h5("Remove Genes"),
helpText("Remove data with lowest percentile absolute expression value shared by all samples. Then remove data with lowest percentile variance across samples."),
fluidRow(
column(6, numericInput("absolute_expval", "Lowest Absolute Percentile (%) To Remove:", 20, step = 1, min = 0)),
column(6, numericInput("variance_expval", "Lowest Variance Percentile (%) To Remove:", 10, step = 1, min = 0))
),
checkboxInput("checkbox_NA", "Convert NA value to 0 in Expression Data", TRUE),
checkboxInput("checkbox_logarithm", "Take the log (e) of Expression Data (Default: Unchecked)", FALSE),
checkboxInput("checkbox_empty", "Remove rows with empty Gene Symbol", TRUE),
checkboxInput("checkbox_duplicated", "Keep only one row with largest mean expression value when Gene Symbol is duplicated", TRUE),
numericInput("max_gene_retain", "Maximum Number of Genes to Retain:", 10000, step = 1000, min = 0),
actionButton("action3", "Continue")
),
# Main panel for displaying outputs ----
mainPanel(
h5("Data Summary"),
verbatimTextOutput("summary"),
helpText("Convert Probe ID to Gene Symbol with Platform:"),
fluidRow(
column(6, textInput("platform_text", NULL, value = "Unknown", width = NULL, placeholder = NULL)),
column(6, actionButton("action_platform", "Convert"))
),
h5("Data Preview"),
tabsetPanel(
id = 'tabset2',
tabPanel("Original Data", DT::dataTableOutput("mytable4")),
tabPanel("Expression Value", DT::dataTableOutput("mytable5")),
tabPanel("Gene Symbol", tableOutput("mytable6"))
)
)
)
),
tabPanel("3. Choose Method",
# titlePanel("Select Method for Gene Co-Expression Analysis"),
tabsetPanel(
id = "MethodList",
tabPanel("lmQCM",
h5("lmQCM: An Algorithm for Detecting Weak Quasi-Cliques in Weighted Graph with Applications in Gene Co-Expression Module Discovery in Cancers"),
helpText("Zhang, Jie, and Kun Huang. \"Normalized ImQCM: An Algorithm for Detecting Weak Quasi-Cliques in Weighted Graph with Applications in Gene Co-Expression Module Discovery in Cancers.\" Cancer informatics 13 (2014): CIN-S14021."),
tags$hr(),
h5("Parameter Choosing"),
helpText("Gamma (γ) (Default = 0.55) controls the threshold for the initiation of each new module, lambda (λ) (Default = 1) and t (Default = 1) define the adaptive
threshold of the module density to ensure proper stopping
criterion for the greedy search for each module (Usually λ and t won't change), and beta (β) (Default = 0.4) is the
threshold for overlapping ratio for merging"),
fluidRow(
column(6, numericInput("gamma", "gamma (γ):", 0.55, step = 0.05)),
column(6, numericInput("lambda", "lambda (λ)", 1, step = 0.05))
),
fluidRow(
column(6, numericInput("t", "t:", 1, step = 0.05)),
column(6, numericInput("beta", "beta (β):", 0.4, step = 0.05))
),
fluidRow(
column(6, numericInput("minClusterSize", "Minimum Cluster Size:", 10, step = 1, width = NULL)),
column(6, selectizeInput(
'massiveCC', 'Calculation of Correlation Coefficient',
choices = c("Pearson", "Spearman")))
),
# Horizontal line ----
tags$hr(),
actionButton("action4_lmQCM", "Confirm and Run!"),
tags$hr()
),
tabPanel("WGCNA",
h5("WGCNA: An R package for weighted correlation network analysis"),
helpText("The WGCNA as an analysis method is described in: Zhang B and Horvath S (2005) A General Framework for Weighted Gene Co-Expression Network Analysis, Statistical Applications in Genetics and Molecular Biology: Vol. 4: No. 1, Article 17 PMID: 16646834"),
helpText("The package implementation is described in the article: Langfelder P, Horvath S (2008) WGCNA: an R package for weighted correlation network analysis. BMC Bioinformatics 2008, 9:559"),
tags$hr(),
h5("Step 1: Pick Soft Thresholding"),
helpText("The soft thresholding, is a value used to power the correlation of the genes to that threshold. The assumption on that by raising the correlation to a power will reduce the noise of the correlations in the adjacency matrix. To pick up one threshold use the pickSoftThreshold function, which calculates for each power if the network resembles to a scale-free graph. The power which produce a higher similarity with a scale-free network is the one you should use."),
actionButton("checkPower", "Check Power (β)"),
uiOutput("WGCNAPowerPlot1and2"),
# Horizontal line ----
tags$hr(),
h5("Step 2: Choose Parameters"),
helpText("Choose the power and remaining parameters. Default are as showned."),
helpText("power (β, Default = 6): The soft thresholding. 6 is large enough so that the resulting network exhibited approximate scale free topology."),
helpText("reassignThreshold (Default = 0): P-value ratio threshold for reassigning genes between modules."),
helpText("mergeCutHeight (Default = 0.25): Dendrogram cut height for module merging."),
helpText("verbose (Default = 3): Integer level of verbosity. Zero means silent, higher values make the output progressively more and more verbose."),
helpText("minModuleSize (Default = 10): Minimum module size for module detection."),
fluidRow(
column(6, numericInput("power", "power (β):", 6, step = 1, min = 1)),
column(6, numericInput("reassignThreshold", "Reassign Threshold", 0, step = 0.01))
),
fluidRow(
column(6, numericInput("mergeCutHeight", "Merge Cut Height:", 0.25, step = 0.01)),
column(6, numericInput("verbose", "verbose:", 3, step = 1))
),
numericInput("minModuleSize", "Minimum Module Size:", 10, step = 1, width = NULL),
# Horizontal line ----
tags$hr(),
actionButton("action4_WGCNA", "Confirm and Run!"),
uiOutput("WGCNAresultUI"),
tags$hr()
)
)
),
tabPanel("4. Result",
mainPanel(
h4("Download Results"),
fluidRow(
column(6,
radioButtons("filetype1", "Merged Clusters with Gene Symbol:",
choices = c("csv", "txt")),
downloadButton('downloadData1', 'Download')
),
column(6,
radioButtons("filetype2", "Eigengene Matrix:",
choices = c("csv", "txt")),
downloadButton('downloadData2', 'Download')
)
),
h4("Preview"),
tabsetPanel(
id = 'tabset',
tabPanel("Merged Clusters", DT::dataTableOutput("clusterResult")),
tabPanel("Eigengene Matrix", tableOutput("mytable7"))
),
tags$script("$(document).on('click', '#clusterResult button', function () {
Shiny.onInputChange('go_lastClickId',this.id)
});")
)
),
tabPanel("5. GO Enrichment Analysis",
mainPanel(
tabsetPanel(
id = 'tabset_GOEA',
tabPanel("Enrichr",
h4("Enrichment Analysis - by Enrichr"),
h5("Adjusted P-value (q-value):"),
helpText("The q-value is an adjusted p-value using the Benjamini-Hochberg method for correction for multiple hypotheses testing. Users can read more about this method, and why it is needed here:"),
helpText("Yoav Benjamini and Yosef Hochberg. Controlling the False Discovery Rate: A Practical and Powerful Approach to Multiple Testing. Journal of the Royal Statistical Society. Series B (Methodological)
Vol. 57, No. 1 (1995), pp. 289-300"),
h5("Relationship between P-value, Z-score, and combined score:"),
helpText("The combined score is a combination of the p-value and z-score calculated by multiplying the two scores as follows:
c = ln(p) * z
Where c is the combined score, p is the p-value computed using Fisher's exact test, and z is the z-score computed to assess the deviation from the expected rank. The combined score provides a compromise between both methods and in several benchmarks we show that it reports the best rankings when compared with the other scoring schemes."),
tabsetPanel(
id = 'tabset',
tabPanel("GO_Biological_Process_2017b",
DT::dataTableOutput("mytable_Enrichr_1")),
tabPanel("GO_Molecular_Function_2017b",
DT::dataTableOutput("mytable_Enrichr_2")),
tabPanel("GO_Cellular_Component_2017b",
DT::dataTableOutput("mytable_Enrichr_3")),
tabPanel("Jensen_DISEASES",
DT::dataTableOutput("mytable_Enrichr_4")),
tabPanel("Reactome_2016",
DT::dataTableOutput("mytable_Enrichr_5")),
tabPanel("KEGG_2016",
DT::dataTableOutput("mytable_Enrichr_6")),
tabPanel("Transcription_Factor_PPIs",
DT::dataTableOutput("mytable_Enrichr_7")),
tabPanel("TargetScan_microRNA_2017",
DT::dataTableOutput("mytable_Enrichr_8"))
)
),
tabPanel("Target Gene Symbols",
h5("The target gene symbols allow users to copy and use in other GO analysis website."),
textAreaInput("textareainput_GOEA", "Gene Symbols", value = "", width = '300px', height = '400px', placeholder = NULL)
)
)
)
)
)  #, style='width: 80%'
),
navbarMenu(
"More",
tabPanel("Developer",
h4("Author Information"),
helpText("Indiana University School of Medicine"),
h4("Publication"),
helpText("Please cite ...")
)
)
)
cat(readLines("test2.txt"), sep = "\n")
cat("\n1\n2 5\n3 8\n", file="test2.txt")
cat(readLines("test2.txt"), sep = "\n")
cat(readLines("test2.txt"), sep = "\n")
read.table("test2.txt", header = TRUE)
read.table("test2.txt", header = F)
read.table("test2.txt", header = TRUE, fill = TRUE)
read.table("test2.txt", header = TRUE, fill = F)
cat(readLines("test2.txt"), sep = "\n")
data = cat(readLines("test2.txt"), sep = "\n")
data2 <- lapply(geneCharVector, function(v) { c(v, rep(NA, max.length-length(v)))})
as.matrix(data)
data = cat(readLines("test2.txt"), sep = "\n")
data = as.matrix(cat(readLines("test2.txt"), sep = "\n"))
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
cat("1\n2 5\n3 8\n", file="test2.txt")
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
cat("1\n2\t5\n3\t8\n", file="test2.txt")
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
strsplit(data, split='\t')
data2 <- lapply(data, function(v) { c(v, rep(NA, max.length-length(v)))})
max.length <- max(sapply(data, length))
max.length
data[[1]]
data[[2]]
max.length <- max(sapply(data2, length))
max.length <- max(sapply(data2, length))
max.length <- max(sapply(data2, length))
data2
strsplit(data, split='\t')
data = strsplit(data, split='\t')
max.length <- max(sapply(data, length))
max.length
data2 <- lapply(data, function(v) { c(v, rep(NA, max.length-length(v)))})
data2
data3 <- data.frame(do.call(rbind, data2))
data3
data[is.na(tmpExp)] <- 0
data[is.na(data)] <- 0
data
data3[is.na(data3)] <- 0
is.na(data3)
data[is.na(data)]
data3[is.na(data3)] <- 0
data3 = data.matrix(data3)
data3
data3[is.na(data3)] <- 0
data3
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
head(data)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/RNA.Rdata")
head(RNA)
quantile(RNA, 10)
# convert na to 0
RNA[is.na(RNA)] <- 0
quantile(RNA, 10)
quantile(RNA, 0.01)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/fname.Rdata")
fname
gsub("\"","",fname)
runApp('Desktop/GeneCoexpression/RGUI_v5')
fname
fname <- gsub("\"","",fname) # convert "\"1553418_a_at\"" to "1553418_a_at"
fname
t <- try(gpl <- getGEO("GPL570"))
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
for (i in 50000:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
print(i)
}
length(fname)
fname(54675)
fname[54675]
fname[54674]
fname[54676]
fname[54677]
fname[54678]
fname[54679]
fname[154679]
RNA
RNA[54675,]
RNA[54676,]
RNA[54677,]
fname[54676]
runApp('Desktop/GeneCoexpression/RGUI_v5')
# data <<- read.csv(input$csvfile$datapath,
#                   header = input$header,
#                   sep = input$sep,
#                   quote = input$quote)
data_temp = as.matrix(readLines("/Users/zhi/Desktop/GSE17537.txt"), sep = '\n')
data_temp = strsplit(data_temp, split=input$sep)
data_temp = strsplit(data_temp, split="\t")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
dim(data_temp)
data_temp[54752]
data_temp[54752,]
data_temp[dim(data_temp)[1],1]
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
}
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp[-dim(data_temp)[1]]
}
# data <<- read.csv(input$csvfile$datapath,
#                   header = input$header,
#                   sep = input$sep,
#                   quote = input$quote)
data_temp = as.matrix(readLines("/Users/zhi/Desktop/GSE17537.txt"), sep = '\n')
data_temp = strsplit(data_temp, split="\t")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp[-dim(data_temp)[1],]
}
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp = data_temp[-dim(data_temp)[1],]
}
dim(data_temp)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/fname.Rdata")
length(fname)
gpltable
gpltable$`Gene Symbol`
if (!is.null(gpltable$`Gene Symbol`)){
print("load GPL table with name \"Gene Symbol\"")
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
}
print(length(fname2))
print(dim(data))
print(length(fname))
fname2 <- fname
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
genes_str <- c('PHF|14','RBM|3','Nlrx1','MSL1','PHF21A','ARL10','INSR')
return(paste(genes_str, collapse = '\n'))
paste(genes_str, collapse = '\n')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
ological_Process_2017b",
"GO_Molecular_Function_2017b",
"GO_Cellular_Component_2017b",
"Jensen_DISEASES",
"Reactome_2016",
"KEGG_2016",
"Transcription_Factor_PPIs",
"TargetScan_microRNA_2017")
enrichr_dbs <- c("GO_Biological_Process_2017b",
"GO_Molecular_Function_2017b",
"GO_Cellular_Component_2017b",
"Jensen_DISEASES",
"Reactome_2016",
"KEGG_2016",
"Transcription_Factor_PPIs",
"TargetScan_microRNA_2017")
paste0(enrichr_dbs, '.csv')
for(i in 1:10){
print(i)
}
for(i in 1:length(enrichr_dbs)){
print(i)
}
for(i in 1:length(enrichr_dbs)){
print(enrichr_dbs[i])#enriched
}
if(separator == ','){
fs <- paste0(enrichr_dbs, '.csv')
}
separator = ','
if(separator == ','){
fs <- paste0(enrichr_dbs, '.csv')
}
fs
for(i in 1:length(enrichr_dbs)){
print(fs[i])#enriched
}
enriched
zip
file.rename
fname = "fname"
if(file.exists(paste0(fname, ".zip"))) {file.rename(paste0(fname, ".zip"), fname)}
file.rename(paste0(fname, ".zip"), fname)
file.exists(paste0(fname, ".zip"))
runApp('Desktop/GeneCoexpression/RGUI_v5')
fs
fs = c(fs, 'genes_list.txt')
fs
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
shiny::runApp('Desktop/annoPeak/annoPeak_v1')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v7')
t <- try(gset <- getGEO("GSE17537", GSEMatrix=TRUE, AnnotGPL=FALSE)) #AnnotGPL default is FALSE
runApp('Desktop/TBI-TSUNAMI/RGUI_v7')
runApp('Desktop/TBI-TSUNAMI/RGUI_v7')
# NCBI GEO
load("./GEO_20180131.Rdata")
getwd()
setwd("/Users/zhi/Desktop/TBI-TSUNAMI/RGUI_v7")
# NCBI GEO
load("./GEO_20180131.Rdata")
GEO[["Actions"]] <- paste0('<div><button type="button" class="btn-analysis" id=dataset_analysis_',1:nrow(GEO),'>Analyze</button></div>')
colnames(GEO)[which(names(GEO) == "Sample.Count")] <- "Samples"
GEO <- GEO %>% select("Samples", everything())
GEO <- GEO %>% select("Actions", everything())
GEO <<- GEO
head(GEO)
runApp()
GEO[1,1]
GEO[1,2]
GEO[1,3]
GEO[1,]$Accession
GEO$Accession[1]
GEO[1,]$Accession
GEO$Accession[1]
as.character(GEO$Accession[1])
runApp()
