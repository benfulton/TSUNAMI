shiny::runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/shiny-examples-master/002-text')
runApp('Desktop/GeneCoexpression/shiny-examples-master/003-reactivity')
runApp('Desktop/GeneCoexpression/shiny-examples-master/003-reactivity')
runApp('Desktop/GeneCoexpression/RGUI')
t <- try(gset <- getGEO(myGSE, GSEMatrix=TRUE, AnnotGPL=FALSE)) #AnnotGPL default is FALSE
myGSE = "GSE 17537"
myGSE = "GSE17537"
t <- try(gset <- getGEO(myGSE, GSEMatrix=TRUE, AnnotGPL=FALSE)) #AnnotGPL default is FALSE
gset <- gset[[idx]]
idx = 1
gset <- gset[[idx]]
edata <- exprs(gset) #This is the expression matrix
pdata <- pData(gset) # data.frame of phenotypic information.
fname <- featureNames(gset) # e.g. 12345_at
fname
pdata
names(pdata)
pdata$title
names(pdata)
pdata$taxid_ch1
pdata$scan_protocol
pdata$data_processing
names(pdata)
pdata$`overall survival follow-up time:ch1`
pdata$supplementary_file
names(pdata)
pdata$extract_protocol_ch1
names(pdata)
gset
gset$Annotation
gset
gset$`ethnicity:ch1`
gset$annotation
View(gset)
gset[1]
gset[2]
gset[[1]]
gset[[2]]
gset[[3]]
gset[[4]]
gset[[5]]
gset[[6]]
gset[[7]]
gset[1,1]
gset[1,2]
gset[2,2]
edata$annotation
annotation(gset)
edata
dim(edata)
dim(edata)[1]
print(sprintf("Number of Samples: ",dim(edata)[2]-1))
dim(edata)[2]
dim(edata)[2]-1
print(sprintf("Annotation Platform: %s",annotation(gset)))
print(sprintf("Number of Genes: %d",dim(edata)[1]))
print(sprintf("Number of Samples: %d",dim(edata)[2]-1))
runApp('Desktop/GeneCoexpression/RGUI')
edata(1:4,1:$)
edata(1:4,1:5)
edata(1:4,1:5)
edata[1:4,1:3]
protocolData(geset)
protocolData(gset)
description(gset)
notes(gset)
storageMode(gset)
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
gset
Meta(gset)
GPLList
GPLList(GPL579)
GPLList(GPL570)
GPLList("GPL570")
GPLList(gset)
GPLList(eset)
GPLList(edata)
GDS2MA(gset,GPL="GPL570")
getGEO("GPL570")
gpl <- getGEO('GPL570')
Meta(gpl)$title
Meta(gpl)
gpl
gpl
gpl$Gene
gpl[1,1]
gpl[1]
Meta(gpl)
gpl$Gene.Symbol
fData(data)
GPLList(gpl)
pData(gpl)
Table(gpl)
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
gpltable[1,]
gpltable%ID
gpltable$ID
gpltable$`Gene Symbol`
gpltable$ID
which(gpltable$ID == "1553559_at")
gpltable[953,]
gpltable[idx,]$`Gene Symbol`
idx
idx <- which(gpltable$ID == "1553559_at")
gpltable[idx,]$`Gene Symbol`
gpltable[953,]
gpltable[idx,]$`Gene Symbol`
edata
fname
row.names(data)
fname
length(fname)
fname[1]
for (i in 1:length(fname)){
which(gpltable$ID == fname[i])
}
runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
try(gpl <- getGEO("GPL570"))
t <- try(gset <- getGEO("GSE17537", GSEMatrix=TRUE, AnnotGPL=FALSE)) #AnnotGPL default is FALSE
edata <- exprs(gset) #This is the expression matrix
# pdata <- pData(gset) # data.frame of phenotypic information.
fname <<- featureNames(gset) # e.g. 12345_at
edata <- exprs(gset) #This is the expression matrix
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
edata <- exprs(gset) #This is the expression matrix
# pdata <- pData(gset) # data.frame of phenotypic information.
fname <<- featureNames(gset) # e.g. 12345_at
data <<- cbind(fname, edata)
data <- cbind(fname, edata)
row.names(data) <- seq(1, length(fname))
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
fname2 <- fname
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
print(dim(data))
print(length(fname2))
data[,1] <<- fname2
data[,1] <- fname2
row.names(data) <- seq(1, length(fname2))
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
class(RNA) <- "numeric"
geneID <- data.frame(data[1:dim(data)[1], 1])
print(dim(RNA))
print(dim(geneID))
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- .2
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
# Remove data with lowest 10% variance across samples
percentile <- .1
index <- varFilter2(eset = RNA_filtered1, var.cutoff = percentile)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
print(sprintf("data dimension before remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
uniGene <- subset(uniGene, nchar(as.character(uniGene)) > 0)
tmpExp <- subset(tmpExp, nchar(as.character(uniGene)) > 0)
print(sprintf("data dimension after remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
uniGene
nchar(as.character(uniGene))
view(uniGene)
uniGene[999:2999]
uniGene[999:2999,]
uniGene[1000:1400]
uniGene[2001:3000]
sum(as.numeric(nchar(as.character(uniGene)) > 0))
sum(as.numeric(nchar(as.character(uniGene)) > 0))
sum(as.numeric(nchar(as.character(uniGene)) == 0))
sum(as.numeric(nchar(as.character(uniGene)) == 0))
length(uniGene)
length(uniGene)
length(geneID_filtered2)
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
print(sprintf("data dimension before remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
print(sprintf("data dimension before remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
uniGene_temp <- subset(uniGene, nchar(as.character(uniGene)) > 0)
tmpExp <- subset(tmpExp, nchar(as.character(uniGene)) > 0)
uniGene <- uniGene_temp
print(sprintf("data dimension after remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/shiny-examples-master/007-widgets')
runApp('Desktop/GeneCoexpression/shiny-examples-master/015-layout-sidebar')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
mean
ans = [1,2,3,4;2,3,4,5]
ans = [1,2,3,4,2,3,4,5]
ans = [1 2 3 4]
ans = numeric([1 2 3 4])
replicate(10, rnorm(20))
x = replicate(10, rnorm(20))
dim(x)
rowSds(as.matrix(x), na.rm=TRUE)
b <- matrix(rep(1:20), nrow=4, ncol=5)
x <- c(5,6,7)
b
b[,3:5] <- sweep(b[,3:5],2,x)
b
b <- matrix(rep(1:20), nrow=4, ncol=5)
x <- c(5,6,7)
b[,3:5] <- sweep(b[,3:5],1,x)
b <- matrix(rep(1:20), nrow=4, ncol=5)
x <- c(1,1,1,1,1)
x
b <- sweep(b,2,x)
b
b <- matrix(rep(1:20), nrow=4, ncol=5)
x <- c(1,2,3,4,5)
b <- sweep(b,2,x)
b
b <- matrix(rep(1:20), nrow=4, ncol=5)
x <- c(1,2,3,4)
b <- sweep(b,1,x)
b
b
t(apply(b, 1, function(x) x/c(1,2,3,4)))
t(apply(b, 2, function(x) x/c(1,2,3,4)))
apply(b, 2, function(x) x/c(1,2,3,4))
b
apply(b, 2, function(x) x/c(1,2,3,4))
svd(x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE)
svd(b, LINPACK = FALSE)
SVD <- svd(XNorm, LINPACK = FALSE)
SVD <- svd(b, LINPACK = FALSE)
SVD$v
t(SVD$v[,1])
write.table(SVD$v, file = "", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
eigengene_matrix = SVD$v
rownames(eigengene_matrix) <- NULL
colnames(eigengene_matrix) <- NULL
eigengene_matrix
write.table(eigengene_matrix, file = "", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(eigengene_matrix, file = "", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
eigengene_matrix = SVD$v
rownames(eigengene_matrix) <- NULL
colnames(eigengene_matrix) <- NULL
write.table(eigengene_matrix, file = "", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(eigengene_matrix, file = "", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(eigengene_matrix, file = "", append = FALSE, quote = TRUE, sep = "",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(eigengene_matrix, file = "", append = FALSE, quote = TRUE, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = F,
col.names = F, qmethod = c("escape", "double"),
fileEncoding = "")
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
load(file = "../../cMatrix.RData")
runApp('Desktop/GeneCoexpression/RGUI_v2')
## Step 2 (around 10 min in Y710 windows)
# setwd("E:/GeneCoexpression/shiny"); #win
setwd("/Users/zhi/Desktop/GeneCoexpression/shiny"); #mac
## Step 2 (around 10 min in Y710 windows)
# setwd("E:/GeneCoexpression/shiny"); #win
setwd("/Users/zhi/Desktop/GeneCoexpression/RGUI_v2/lmQCM"); #mac
source("utils.R")
source("localMaximumQCM.R")
gamma <- 0.55
lambda <- 1
t <- 1
beta <- 0.4
minClusterSize <- 10
print(sprintf("gamma: %.2f",gamma))
print(sprintf("lambda: %.2f",lambda))
print(sprintf("t: %.2f",t))
print(sprintf("beta: %.2f",beta))
print(sprintf("minClusterSize: %d",minClusterSize))
C <- localMaximumQCM(abs(cMatrix), gamma, t, lambda)
# setwd("/media/zhi/Drive3/GeneCoexpression/matlab_old");
setwd("/Users/zhi/Desktop/GeneCoexpression/RGUI_v2"); #mac
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
# Step 0
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data.frame(data[1:dim(data)[1], 1])
# Remove data with lowest 20% absolute exp value shared by all samples
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
# Remove data with lowest 10% variance across samples
index <- varFilter2(eset = RNA_filtered1, var.cutoff = 0.1)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
expData <- RNA_filtered2
res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
ind1 <- res$first
uniGene <- res$second
tmpExp <-expData[ind1,]
nSample <- ncol(tmpExp)
res <- sort.int(rowMeans(tmpExp), decreasing = TRUE, index.return=TRUE)
sortMean <- res$x
sortInd <- res$ix
topN <- min(2000, nrow(tmpExp))
res$ix
res$ix[1:10]
expData[3104]
expData[3704]
expData[3736]
runApp()
runApp()
runApp()
runApp()
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
# Step 0
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data.frame(data[1:dim(data)[1], 1])
# Remove data with lowest 20% absolute exp value shared by all samples
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
# Remove data with lowest 10% variance across samples
index <- varFilter2(eset = RNA_filtered1, var.cutoff = 0.1)
RNA_filtered2 = RNA_filtered1
geneID_filtered2 = geneID_filtered1
expData <- RNA_filtered2
res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
ind1 <- res$first
uniGene <- res$second
tmpExp <-expData[ind1,]
nSample <- ncol(tmpExp)
res <- sort.int(rowMeans(tmpExp), decreasing = TRUE, index.return=TRUE)
sortMean <- res$x
sortInd <- res$ix
topN <- min(2000, nrow(tmpExp))
finalExp <- tmpExp[sortInd[1:topN], ]
finalExp[is.nan(finalExp)] <- 0
finalSym <- uniGene[sortInd[1:topN]]
finalSymChar <- as.character(finalSym)
finalExp[is.na(finalExp)] <- 0
runApp()
finalSymChar
finalSymChar[1:5]
finalSymChar[111:115]
finalSymChar[1995:2000]
geneCharVector <- matrix(0, nrow = 0, ncol = length(mergedCluster))
runApp()
