tabsetPanel(
id = 'tabset_GOEA',
tabPanel("Enrichr",
h4("Enrichment Analysis - by Enrichr"),
h5("Adjusted P-value (q-value):"),
helpText("The q-value is an adjusted p-value using the Benjamini-Hochberg method for correction for multiple hypotheses testing. Users can read more about this method, and why it is needed here:"),
helpText("Yoav Benjamini and Yosef Hochberg. Controlling the False Discovery Rate: A Practical and Powerful Approach to Multiple Testing. Journal of the Royal Statistical Society. Series B (Methodological)
Vol. 57, No. 1 (1995), pp. 289-300"),
h5("Relationship between P-value, Z-score, and combined score:"),
helpText("The combined score is a combination of the p-value and z-score calculated by multiplying the two scores as follows:
c = ln(p) * z
Where c is the combined score, p is the p-value computed using Fisher's exact test, and z is the z-score computed to assess the deviation from the expected rank. The combined score provides a compromise between both methods and in several benchmarks we show that it reports the best rankings when compared with the other scoring schemes."),
tabsetPanel(
id = 'tabset',
tabPanel("GO_Biological_Process_2017b",
DT::dataTableOutput("mytable_Enrichr_1")),
tabPanel("GO_Molecular_Function_2017b",
DT::dataTableOutput("mytable_Enrichr_2")),
tabPanel("GO_Cellular_Component_2017b",
DT::dataTableOutput("mytable_Enrichr_3")),
tabPanel("Jensen_DISEASES",
DT::dataTableOutput("mytable_Enrichr_4")),
tabPanel("Reactome_2016",
DT::dataTableOutput("mytable_Enrichr_5")),
tabPanel("KEGG_2016",
DT::dataTableOutput("mytable_Enrichr_6")),
tabPanel("Transcription_Factor_PPIs",
DT::dataTableOutput("mytable_Enrichr_7")),
tabPanel("TargetScan_microRNA_2017",
DT::dataTableOutput("mytable_Enrichr_8"))
)
),
tabPanel("Target Gene Symbols",
h5("The target gene symbols allow users to copy and use in other GO analysis website."),
textAreaInput("textareainput_GOEA", "Gene Symbols", value = "", width = '300px', height = '400px', placeholder = NULL)
)
)
)
)
)  #, style='width: 80%'
),
navbarMenu(
"More",
tabPanel("Developer",
h4("Author Information"),
helpText("Indiana University School of Medicine"),
h4("Publication"),
helpText("Please cite ...")
)
)
)
cat(readLines("test2.txt"), sep = "\n")
cat("\n1\n2 5\n3 8\n", file="test2.txt")
cat(readLines("test2.txt"), sep = "\n")
cat(readLines("test2.txt"), sep = "\n")
read.table("test2.txt", header = TRUE)
read.table("test2.txt", header = F)
read.table("test2.txt", header = TRUE, fill = TRUE)
read.table("test2.txt", header = TRUE, fill = F)
cat(readLines("test2.txt"), sep = "\n")
data = cat(readLines("test2.txt"), sep = "\n")
data2 <- lapply(geneCharVector, function(v) { c(v, rep(NA, max.length-length(v)))})
as.matrix(data)
data = cat(readLines("test2.txt"), sep = "\n")
data = as.matrix(cat(readLines("test2.txt"), sep = "\n"))
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
cat("1\n2 5\n3 8\n", file="test2.txt")
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
cat("1\n2\t5\n3\t8\n", file="test2.txt")
data = as.matrix(readLines("test2.txt"), sep = "\n")
data
strsplit(data, split='\t')
data2 <- lapply(data, function(v) { c(v, rep(NA, max.length-length(v)))})
max.length <- max(sapply(data, length))
max.length
data[[1]]
data[[2]]
max.length <- max(sapply(data2, length))
max.length <- max(sapply(data2, length))
max.length <- max(sapply(data2, length))
data2
strsplit(data, split='\t')
data = strsplit(data, split='\t')
max.length <- max(sapply(data, length))
max.length
data2 <- lapply(data, function(v) { c(v, rep(NA, max.length-length(v)))})
data2
data3 <- data.frame(do.call(rbind, data2))
data3
data[is.na(tmpExp)] <- 0
data[is.na(data)] <- 0
data
data3[is.na(data3)] <- 0
is.na(data3)
data[is.na(data)]
data3[is.na(data3)] <- 0
data3 = data.matrix(data3)
data3
data3[is.na(data3)] <- 0
data3
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
head(data)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/RNA.Rdata")
head(RNA)
quantile(RNA, 10)
# convert na to 0
RNA[is.na(RNA)] <- 0
quantile(RNA, 10)
quantile(RNA, 0.01)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/fname.Rdata")
fname
gsub("\"","",fname)
runApp('Desktop/GeneCoexpression/RGUI_v5')
fname
fname <- gsub("\"","",fname) # convert "\"1553418_a_at\"" to "1553418_a_at"
fname
t <- try(gpl <- getGEO("GPL570"))
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
for (i in 50000:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
print(i)
}
length(fname)
fname(54675)
fname[54675]
fname[54674]
fname[54676]
fname[54677]
fname[54678]
fname[54679]
fname[154679]
RNA
RNA[54675,]
RNA[54676,]
RNA[54677,]
fname[54676]
runApp('Desktop/GeneCoexpression/RGUI_v5')
# data <<- read.csv(input$csvfile$datapath,
#                   header = input$header,
#                   sep = input$sep,
#                   quote = input$quote)
data_temp = as.matrix(readLines("/Users/zhi/Desktop/GSE17537.txt"), sep = '\n')
data_temp = strsplit(data_temp, split=input$sep)
data_temp = strsplit(data_temp, split="\t")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
dim(data_temp)
data_temp[54752]
data_temp[54752,]
data_temp[dim(data_temp)[1],1]
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
}
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp[-dim(data_temp)[1]]
}
# data <<- read.csv(input$csvfile$datapath,
#                   header = input$header,
#                   sep = input$sep,
#                   quote = input$quote)
data_temp = as.matrix(readLines("/Users/zhi/Desktop/GSE17537.txt"), sep = '\n')
data_temp = strsplit(data_temp, split="\t")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp[-dim(data_temp)[1],]
}
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp = data_temp[-dim(data_temp)[1],]
}
dim(data_temp)
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/fname.Rdata")
length(fname)
gpltable
gpltable$`Gene Symbol`
if (!is.null(gpltable$`Gene Symbol`)){
print("load GPL table with name \"Gene Symbol\"")
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
}
print(length(fname2))
print(dim(data))
print(length(fname))
fname2 <- fname
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
genes_str <- c('PHF|14','RBM|3','Nlrx1','MSL1','PHF21A','ARL10','INSR')
return(paste(genes_str, collapse = '\n'))
paste(genes_str, collapse = '\n')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
ological_Process_2017b",
"GO_Molecular_Function_2017b",
"GO_Cellular_Component_2017b",
"Jensen_DISEASES",
"Reactome_2016",
"KEGG_2016",
"Transcription_Factor_PPIs",
"TargetScan_microRNA_2017")
enrichr_dbs <- c("GO_Biological_Process_2017b",
"GO_Molecular_Function_2017b",
"GO_Cellular_Component_2017b",
"Jensen_DISEASES",
"Reactome_2016",
"KEGG_2016",
"Transcription_Factor_PPIs",
"TargetScan_microRNA_2017")
paste0(enrichr_dbs, '.csv')
for(i in 1:10){
print(i)
}
for(i in 1:length(enrichr_dbs)){
print(i)
}
for(i in 1:length(enrichr_dbs)){
print(enrichr_dbs[i])#enriched
}
if(separator == ','){
fs <- paste0(enrichr_dbs, '.csv')
}
separator = ','
if(separator == ','){
fs <- paste0(enrichr_dbs, '.csv')
}
fs
for(i in 1:length(enrichr_dbs)){
print(fs[i])#enriched
}
enriched
zip
file.rename
fname = "fname"
if(file.exists(paste0(fname, ".zip"))) {file.rename(paste0(fname, ".zip"), fname)}
file.rename(paste0(fname, ".zip"), fname)
file.exists(paste0(fname, ".zip"))
runApp('Desktop/GeneCoexpression/RGUI_v5')
fs
fs = c(fs, 'genes_list.txt')
fs
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
install.packages("lmqcm")
install.packages("lmQCM")
library(lmQCM)
# 03/13/2017 Zhi Huang
library(shiny)
library(rsconnect)
library(plyr)
library(data.table)
library(genefilter)
library(Biobase)
library(rPython)
library(WGCNA)
library(GEOquery)
library(dplyr)
library(enrichR)
library(DT)
library(reticulate)
use_python("/Users/zhi/anaconda2/bin/python")
setwd('/Users/zhi/Desktop/GeneCoexpression/RGUI_v5/')
data <- NULL
GEO <- NULL
finalExp <- NULL
finalSym <- NULL
finalSymChar <- NULL
text <- NULL
geneCharVector_global <- NULL
eigengene_matrix <- NULL
#   +------------------------------------------------------------+
#   |
#   |
#   |                         Load Data
#   |
#   |
#   +--------------------------------
data_in = as.matrix(readLines('../matlab_old/RNAdata.csv'), sep = '\n')
data_temp = strsplit(data_in, split=",")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp = data_temp[-dim(data_temp)[1],]
}
data <- data_temp[-1,]
print("CSV / txt file Processed.")
print(sprintf("Number of Genes: %d",dim(data)[1]))
print(sprintf("Number of Samples: %d",(dim(data)[2]-1)))
#   +------------------------------------------------------------+
#   |
#   |
#   |                      Cleaning the Data
#   |
#   |
#   +--------------------------------
source("utils.R")
RNA <- as.matrix(data[, 2:dim(data)[2]])
class(RNA) <- "numeric"
geneID <- data.frame(data[, 1])
print(dim(RNA))
print(dim(geneID))
# convert na to 0
RNA[is.na(RNA)] <- 0
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- 20/100.
# save(RNA, file="/Users/zhi/Desktop/RNA.Rdata")
if (percentile > 0){
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
} else {
RNA_filtered1 = RNA
geneID_filtered1 = geneID
}
print(dim(RNA_filtered1))
# Remove data with lowest 10% variance across samples
percentile <- 9.99/100.
if (percentile > 0){
index <- varFilter2(eset = RNA_filtered1, var.cutoff = percentile)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
} else {
RNA_filtered2 = RNA_filtered1
geneID_filtered2 = geneID_filtered1
}
print(dim(RNA_filtered2))
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
nSample <- ncol(tmpExp)
res <- sort.int(rowMeans(tmpExp), decreasing = TRUE, index.return=TRUE)
sortMean <- res$x
sortInd <- res$ix
topN <- min(2000, nrow(tmpExp))
finalExp <- tmpExp[sortInd[1:topN], ]
setwd('/Users/zhi/Desktop/GeneCoexpression/RGUI_v5/')
getwd()
setwd('/Users/zhi/Desktop/TBI-TSUNAMI/RGUI_v5/')
data <- NULL
GEO <- NULL
finalExp <- NULL
finalSym <- NULL
finalSymChar <- NULL
text <- NULL
geneCharVector_global <- NULL
eigengene_matrix <- NULL
#   +------------------------------------------------------------+
#   |
#   |
#   |                         Load Data
#   |
#   |
#   +--------------------------------
data_in = as.matrix(readLines('../matlab_old/RNAdata.csv'), sep = '\n')
data_temp = strsplit(data_in, split=",")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp = data_temp[-dim(data_temp)[1],]
}
data <- data_temp[-1,]
print("CSV / txt file Processed.")
print(sprintf("Number of Genes: %d",dim(data)[1]))
print(sprintf("Number of Samples: %d",(dim(data)[2]-1)))
#   +------------------------------------------------------------+
#   |
#   |
#   |                      Cleaning the Data
#   |
#   |
#   +--------------------------------
source("utils.R")
RNA <- as.matrix(data[, 2:dim(data)[2]])
class(RNA) <- "numeric"
geneID <- data.frame(data[, 1])
print(dim(RNA))
print(dim(geneID))
# convert na to 0
RNA[is.na(RNA)] <- 0
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- 20/100.
# save(RNA, file="/Users/zhi/Desktop/RNA.Rdata")
if (percentile > 0){
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
} else {
RNA_filtered1 = RNA
geneID_filtered1 = geneID
}
print(dim(RNA_filtered1))
# Remove data with lowest 10% variance across samples
percentile <- 9.99/100.
if (percentile > 0){
index <- varFilter2(eset = RNA_filtered1, var.cutoff = percentile)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
} else {
RNA_filtered2 = RNA_filtered1
geneID_filtered2 = geneID_filtered1
}
print(dim(RNA_filtered2))
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
nSample <- ncol(tmpExp)
res <- sort.int(rowMeans(tmpExp), decreasing = TRUE, index.return=TRUE)
sortMean <- res$x
sortInd <- res$ix
topN <- min(2000, nrow(tmpExp))
finalExp <- tmpExp[sortInd[1:topN], ]
mergedCluster <- lmQCM(finalExp, input$gamma, input$t, input$lambda, input$beta, input$minClusterSize, input$massiveCC)
mergedCluster <- lmQCM(finalExp, 0.55, 1, 1, 0.4, 10)
mergedCluster
geneCharVector <- matrix(0, nrow = 0, ncol = length(mergedCluster))
temp_eigengene <- matrix(0, nrow = length(mergedCluster), ncol = dim(finalExp)[2]) # Clusters * Samples
temptext <- ""
for (i in 1:(length(mergedCluster))) {
vector <- as.matrix(mergedCluster[[i]])
vector <- vector + 1 # covert python indexing to R indexing
geneID <- vector
print(i)
print(vector)
# ===== Calculate Eigengene Start
X <- finalExp[geneID,]
mu <- rowMeans(X)
stddev <- rowSds(as.matrix(X), na.rm=TRUE) # standard deviation with 1/(n-1)
#normalize X:
XNorm <- sweep(X,1,mu)
XNorm <- apply(XNorm, 2, function(x) x/stddev)
SVD <- svd(XNorm, LINPACK = FALSE)
temp_eigengene[i,] <- t(SVD$v[,1])
# ===== Calculate Eigengene Finished
geneChar <- c(toString(i), finalSymChar[vector])
geneCharVector[i] <- list(geneChar)
temptext <- paste(temptext, capture.output(cat(geneChar, sep=',')), sep="\n")
}
temptext
mergedCluster
View(mergedCluster)
length(mergedCluster)
geneCharVector <- matrix(0, nrow = 0, ncol = length(mergedCluster))
dim(finalExp)[2]
temp_eigengene <- matrix(0, nrow = length(mergedCluster), ncol = dim(finalExp)[2]) # Clusters * Samples
temp_eigengene
temptext <- ""
as.matrix(mergedCluster[[1]])
vector <- as.matrix(mergedCluster[[1]])
vector <- vector + 1 # covert python indexing to R indexing
vector
vector = vector-1
geneID <- vector
geneID
finalExp[geneID,]
finalSym <- uniGene[sortInd[1:topN]]
finalSymChar <- as.character(finalSym)
temptext <- ""
for (i in 1:(length(mergedCluster))) {
vector <- as.matrix(mergedCluster[[i]])
geneID <- vector
print(i)
print(vector)
# ===== Calculate Eigengene Start
X <- finalExp[geneID,]
mu <- rowMeans(X)
stddev <- rowSds(as.matrix(X), na.rm=TRUE) # standard deviation with 1/(n-1)
#normalize X:
XNorm <- sweep(X,1,mu)
XNorm <- apply(XNorm, 2, function(x) x/stddev)
SVD <- svd(XNorm, LINPACK = FALSE)
temp_eigengene[i,] <- t(SVD$v[,1])
# ===== Calculate Eigengene Finished
geneChar <- c(toString(i), finalSymChar[vector])
geneCharVector[i] <- list(geneChar)
temptext <- paste(temptext, capture.output(cat(geneChar, sep=',')), sep="\n")
}
temptext
temptext <- substring(temptext, 2) # remove first \n separater
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
