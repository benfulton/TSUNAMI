print(hello)
print('hello')
nba
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nb
nba
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
View(nba)
View(nba)
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,1
install.packages(rsconnect)
install.packages(rsconnected)
install.packages("rsconnected")
install.packages("rsconnected")
install.packages("rsconnected")
install.packages("rsconnect")
library(rsconnect)
install.packages("shiny")
install.packages("shiny")
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
genefilter
library(genefilter)
library(shiny); runApp('Desktop/GeneCoexpression/shiny/main.R')
install.packages("rPython")
text <- ""
library(shiny); runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main.R')
library(shiny); runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
library(genefilter)
library(Biobase)
library(rPython)
# setwd("/media/zhi/Drive3/GeneCoexpression/matlab_old");
setwd("/Users/zhi/Desktop/GeneCoexpression/shiny"); #mac
# setwd("E:/GeneCoexpression/shiny"); #win
source("utils.R")
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
# Step 0
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data.frame(data[1:dim(data)[1], 1])
# Remove data with lowest 20% absolute exp value shared by all samples
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
# Remove data with lowest 10% variance across samples
index <- varFilter2(eset = RNA_filtered1, var.cutoff = 0.1)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
expData <- RNA_filtered2
res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
ind1 <- res$first
uniGene <- res$second
tmpExp <-expData[ind1,]
nSample <- ncol(tmpExp)
res <- sort.int(rowMeans(tmpExp), decreasing = TRUE, index.return=TRUE)
sortMean <- res$x
sortInd <- res$ix
topN <- min(20000, nrow(tmpExp))
finalExp <- tmpExp[sortInd[1:topN], ]
finalExp[is.nan(finalExp)] <- 0
finalSym <- uniGene[sortInd[1:topN]]
finalSymChar <- as.character(finalSym)
finalExp[is.na(finalExp)] <- 0
# Start the clock!
# ptm <- proc.time()
step1 = 1
gamma = 0.5
t = 1
lambda = 1
beta = 0.4
minClusterSize = 10
python.load("main.py")
# mergedCluster <- python.call("mainroutine", step1, as.vector(finalExp), nrow(finalExp), ncol(finalExp), gamma, t, lambda, beta, minClusterSize)
# cMatrix <- massivePCC_withoutNaN(finalExp)
# Stop the clock
# ptm <- proc.time() - ptm
# print(ptm)
# save(mergedCluster, file = "./mergedCluster.RData")
load(file = "./mergedCluster.RData")
geneCharVector <- matrix(0, nrow = 0, ncol = length(mergedCluster))
text <- ""
for (i in 1:(length(mergedCluster))) {
vector <- as.matrix(mergedCluster[[i]])
vector <- vector + 1 # covert python indexing to R indexing
geneChar <- finalSymChar[vector]
geneCharVector[i] <- list(geneChar)
text <- paste(text, capture.output(cat(geneChar, sep=' ')), sep="\n")
}
text
data.frame(matrix(unlist(text), nrow=132, byrow=T),stringsAsFactors=FALSE)
mergedCluster
text
strsplit(text(), " ")
strsplit(text, " ")
length(text)
length(text[1])
strsplit(text, "\n")
text_multiline <- strsplit(text, "\n")
text_multiline
text_multiline[1]
text_multiline[[1]]
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline
text_multiline[1]
runApp('main2.R')
runApp('main2.R')
text
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline
runApp('main2.R')
as.list(text_multiline)
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text, " ")
text_multiline
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
text_multiline
runApp('main2.R')
as.list(text_multiline)
runApp('main2.R')
runApp('main2.R')
text_multiline
data.frame(text_multiline)
data.frame(text_multiline, na= "")
data.frame(text_multiline, NA="")
plyr::ldply(word.list, rbind)
plyr::ldply(text_multiline, rbind)
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
biocLite("xtable")
install.packages("xtable")
install.packages("xtable")
xtable(text_multiline)
text_multiline
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
# as.list(text_multiline)
max.length <- max(sapply(text_multiline, length))
text_multiline <- lapply(text_multiline, function(v) { c(v, rep(NA, max.length-length(v)))})
do.call(rbind, text_multiline)
text_multiline
library(shiny); runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
library(Biobase)
library(rPython)
python.load("main.py")
runApp('main2.R')
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
# as.list(text_multiline)
max.length <- max(sapply(text_multiline, length))
text_multiline <- lapply(text_multiline, function(v) { c(v, rep(NA, max.length-length(v)))})
text_multiline <- data.frame(do.call(rbind, text_multiline))
View(text_multiline)
View(text_multiline)
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
text_multiline
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
text_multiline
data.frame(text_multiline)
rbind.fill(text_multiline)
library(rbind)
library(plyr)
rbind.fill(text_multiline)
names(text_multiline[[1]])
dat <- data.frame()
for(i in seq(along=text_multiline))
for(j in names(text_multiline[[i]]))
dat[i,j] <- text_multiline[[i]][j]
dat
dat
seq(along=text_multiline)
length(text_multiline[[i]])
dat <- data.frame()
for(i in seq(along=text_multiline))
for(j in length(text_multiline[[i]]))
dat[i,j] <- text_multiline[[i]][j]
dat
text_multiline[[i]][j]
do.call(rbind, lapply(lapply(text_multiline, unlist), "[",
unique(unlist(c(sapply(text_multiline,names))))))
lapply(text_multiline, `length<-`, max(lengths(text_multiline)))
out <- data.frame(lapply(text_multiline, `length<-`, max(lengths(text_multiline))))
out
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
text_multiline
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
out <- data.frame(lapply(text_multiline, `length<-`, max(lengths(text_multiline))))
runApp('~/Downloads/shiny-examples-master/013-selectize')
runApp('~/Downloads/shiny-examples-master/030-basic-datatable')
data <- mpg
data <- data[data$manufacturer == input$man,]
data
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
out[873]
length(out)
seq(1,117)
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
text_multiline <- strsplit(text(), "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
out <- t(data.frame(lapply(text_multiline, `length<-`, max(lengths(text_multiline)))))
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
out <- t(data.frame(lapply(text_multiline, `length<-`, max(lengths(text_multiline)))))
runApp('main2.R')
runApp('main2.R')
length(out)
# text_multiline <- strsplit(text(), "\n")[[1]]
# text_multiline <- text_multiline[2:length(text_multiline)]
# text_multiline <- strsplit(text_multiline, " ")
out <- data.frame(t(lapply(text_multiline, `length<-`, max(lengths(text_multiline)))))
runApp('main2.R')
out
# text_multiline <- strsplit(text(), "\n")[[1]]
# text_multiline <- text_multiline[2:length(text_multiline)]
# text_multiline <- strsplit(text_multiline, " ")
# out <- data.frame(t(lapply(text_multiline, `length<-`, max(lengths(text_multiline)))))
row.names(out) <- seq(1,length(out))
runApp('main2.R')
runApp('main2.R')
lengths(text_multiline)
max(lengths(text_multiline))
text_multiline <- strsplit(text(), "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
out <- data.frame(t(lapply(text_multiline, `length<-`, max(lengths(text_multiline)))))
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline <- text_multiline[2:length(text_multiline)]
text_multiline <- strsplit(text_multiline, " ")
out <- data.frame(t(lapply(text_multiline, `length<-`, max(lengths(text_multiline)))))
out <- data.frame(lapply(text_multiline, `length<-`, max(lengths(text_multiline))))
out <- transpose(data.frame(lapply(text_multiline, `length<-`, max(lengths(text_multiline)))))
library(data.table)
install.packages("data.table")
library(data.table)
out <- transpose(data.frame(lapply(text_multiline, `length<-`, max(lengths(text_multiline)))))
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
text_multiline
runApp('main2.R')
runApp('main2.R')
text_multiline <- strsplit(text, "\n")[[1]]
text_multiline
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
runApp('main2.R')
