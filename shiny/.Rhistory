print(hello)
print('hello')
nba
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nb
nba
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
View(nba)
View(nba)
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,1
install.packages(rsconnect)
install.packages(rsconnected)
install.packages("rsconnected")
install.packages("rsconnected")
install.packages("rsconnected")
install.packages("rsconnect")
library(rsconnect)
install.packages("shiny")
install.packages("shiny")
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
genefilter
library(genefilter)
library(shiny); runApp('Desktop/GeneCoexpression/shiny/main.R')
install.packages("rPython")
library(genefilter)
library(Biobase)
library(rPython)
# setwd("/media/zhi/Drive3/GeneCoexpression/matlab_old");
setwd("/Users/zhi/Desktop/GeneCoexpression/shiny"); #mac
# setwd("E:/GeneCoexpression/shiny"); #win
source("utils.R")
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
# Step 1
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data.frame(data[1:dim(data)[1], 1])
# Remove data with lowest 20% absolute exp value shared by all samples
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
# Remove data with lowest 10% variance across samples
index <- varFilter2(eset = RNA_filtered1, var.cutoff = 0.1)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
expData <- RNA_filtered2
res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
ind1 <- res$first
uniGene <- res$second
tmpExp <-expData[ind1,]
nSample <- ncol(tmpExp)
res <- sort.int(rowMeans(tmpExp), decreasing = TRUE, index.return=TRUE)
sortMean <- res$x
sortInd <- res$ix
topN <- min(20000, nrow(tmpExp))
finalExp <- tmpExp[sortInd[1:topN], ]
finalExp[is.nan(finalExp)] <- 0
finalSym <- uniGene[sortInd[1:topN]]
finalExp[is.na(finalExp)] <- 0
step1 = 1
gamma = 0.5
t = 1
lambda = 1
beta = 0.4
minClusterSize = 10
python.load("main.py")
mergedCluster <- python.call("mainroutine", step1, as.vector(finalExp), nrow(finalExp), ncol(finalExp), gamma, t, lambda, beta, minClusterSize)
mergedCluster
python.load("main.py")
mergedCluster <- python.call("mainroutine", step1, as.vector(finalExp), nrow(finalExp), ncol(finalExp), gamma, t, lambda, beta, minClusterSize)
mergedCluster
mergedCluster <- python.call("mainroutine", step1, as.vector(finalExp), nrow(finalExp), ncol(finalExp), gamma, t, lambda, beta, minClusterSize)
python.load("main.py")
mergedCluster <- python.call("mainroutine", step1, as.vector(finalExp), nrow(finalExp), ncol(finalExp), gamma, t, lambda, beta, minClusterSize)
python.load("main.py")
mergedCluster <- python.call("mainroutine", step1, as.vector(finalExp), nrow(finalExp), ncol(finalExp), gamma, t, lambda, beta, minClusterSize)
mergedCluster
step1 = 1
gamma = 0.5
t = 1
lambda = 1
beta = 0.4
minClusterSize = 10
python.load("main.py")
mergedCluster <- python.call("mainroutine", step1, as.vector(finalExp), nrow(finalExp), ncol(finalExp), gamma, t, lambda, beta, minClusterSize)
View(mergedCluster)
save(mergedCluster, file = "./mergedCluster.RData")
mergedCluster <- load("./mergedCluster.RData")
load(mergedCluster, "./mergedCluster.RData")
mergedCluster <- load(file = "./mergedCluster.RData")
load(file = "./mergedCluster.RData")
length(mergedCluster)
library(shiny); runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
data
runApp('main.R')
runApp('main.R')
output
mergedCluster
apply(mergedCluster, 1, function(x){cat(x); cat("\n")})
str(mergedCluster)
mergedCluster[1]
mergedCluster[1].value
cat(mergedCluster)
ans = mergedCluster
ans = data.frame(mergedCluster)
cat(mergedCluster, sep='\n')
cat(mergedCluster[1], sep='\n')
cat(as.matrix(mergedCluster[1]), sep='\n')
ans = as.matrix(mergedCluster[1])
ans = as.matrix(mergedCluster[1,1])
ans = as.matrix(mergedCluster[[1]])
ans = as.matrix(mergedCluster[[2]])
ans = as.matrix(mergedCluster[[3]])
cat(as.matrix(mergedCluster[[1]]), sep='\n')
cat(as.matrix(mergedCluster[[1]]), sep=' ')
1:5
length(output)
print()
''
print()
cat()
runApp('main.R')
cat(sep='\n')
cat(,sep='\n')
cat([],sep='\n')
cat(Null,sep='\n')
cat(None,sep='\n')
cat('\n')
runApp('main.R')
