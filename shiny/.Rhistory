i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 15, ...)
})
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data[,c(4,6:7)],
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 15, ...)
})
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
circos.clear()
circos.initializeWithIdeogram(plotType = NULL)
BED.data <- data.frame(hg38.matched[,c(4,6:18)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data[,c(4,6:7)],
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 15, ...)
})
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
circos.clear()
circos.initializeWithIdeogram(plotType = NULL)
BED.data <- data.frame(hg38.matched[,c(4,6:18)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 15, ...)
})
View(hg38_matched)
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 15, ...)
})
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 15, ...)
})
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
circos.clear()
circos.initializeWithIdeogram(plotType = NULL)
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 15, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.clear()
circos.initializeWithIdeogram(plotType = NULL)
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 3, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.clear()
circos.initializeWithIdeogram(plotType = NULL)
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.genomicIdeogram()
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
circos.clear()
circos.initializeWithIdeogram(species = "hg38", chromosome.index = paste0("chr", c(1:22, "X", "Y")))
text(0, 0, "Human Chromosomes", cex = 1)
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
load(system.file(package = "circlize", "extdata", "DMR.RData"))
bed_list = list(DMR_hyper, DMR_hypo)
bed_list
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicRainfall(BED.data, pch = 16, cex = 0.4, col = "#FF000080")
BED.data
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)], pch = 16, cex = 0.4, col = "#FF000080")
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA,
bg.col = rep("grey", dim(chr_count)[1]), track.height = 0.05,
panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
# circos.text(mean(xlim), 2.5,
#             facing = "outside", niceFacing = T,
#             sector.name, cex = 0.8, adj = c(0.5, 0))
})
circos.clear()
output$circos_plot_component <- renderPlot({
})
print('tab4_functional_plots')
session$sendCustomMessage("myCallbackHandler", "tab4_functional_plots")
}
})
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
circos.clear()
circos.initializeWithIdeogram(plotType = NULL)
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
circos.clear()
circos.initializeWithIdeogram(plotType = NULL)
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
circos.genomicPoints(region, value = 1, ...)
})
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
circos.clear()
circos.initializeWithIdeogram(plotType = NULL)
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
circos.genomicPoints(region, value = 1, ...)
})
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.initializeWithIdeogram(species = "hg38", chromosome.index = paste0("chr", c(1:22, "X", "Y")))
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.genomicTrack(BED.data, track.height = 0.1,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
# circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
title("This is the title")
# circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
title("Human Genomics (Dec. 2013 GRCh38/hg38)")
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
# circos.initializeWithIdeogram(plotType = NULL)
circos.initializeWithIdeogram(species = "hg38", chromosome.index = paste0("chr", c(1:22, "X", "Y")))
# text(0, 0, "Human Chromosomes", cex = 1)
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
title("Human Genomics (GRCh38/hg38)")
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
function (cytoband = system.file(package = "circlize", "extdata",
"cytoBand.txt"), species = NULL, sort.chr = TRUE, chromosome.index = NULL,
major.by = NULL, plotType = c("ideogram", "axis", "labels"),
track.height = convert_height(3, "mm"), ideogram.height = convert_height(2,
"mm"), ...)
d
# circos.initializeWithIdeogram(plotType = NULL)
circos.initializeWithIdeogram(species = "hg38", chromosome.index = paste0("chr", c(1:22, "X", "Y")))
# text(0, 0, "Human Chromosomes", cex = 1)
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
title("Human Genomics (GRCh38/hg38)")
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA,
bg.col = rep("grey", dim(chr_count)[1]), track.height = 0.05,
panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
# circos.text(mean(xlim), 2.5,
#             facing = "outside", niceFacing = T,
#             sector.name, cex = 0.8, adj = c(0.5, 0))
})
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.genomicTrack(BED.data,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, pch = 16, ...)
})
par(mar = c(1, 1, 1, 1))
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
# circos.initializeWithIdeogram(plotType = NULL)
circos.initializeWithIdeogram(species = "hg38", chromosome.index = paste0("chr", c(1:22, "X", "Y")))
# text(0, 0, "Human Chromosomes", cex = 1)
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
# circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
title("Human Genomics (GRCh38/hg38)")
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA,
bg.col = rep("grey", dim(chr_count)[1]), track.height = 0.05,
panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
# circos.text(mean(xlim), 2.5,
#             facing = "outside", niceFacing = T,
#             sector.name, cex = 0.8, adj = c(0.5, 0))
})
circos.genomicTrack(BED.data, ylim = c(0, 1),
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.clear()
circos.genomicTrack(BED.data, track.height = 0.4,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
# circos.initializeWithIdeogram(plotType = NULL)
circos.initializeWithIdeogram(species = "hg38", chromosome.index = paste0("chr", c(1:22, "X", "Y")))
# text(0, 0, "Human Chromosomes", cex = 1)
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
# circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
title("Human Genomics (GRCh38/hg38)")
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA,
bg.col = rep("grey", dim(chr_count)[1]), track.height = 0.05,
panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
# circos.text(mean(xlim), 2.5,
#             facing = "outside", niceFacing = T,
#             sector.name, cex = 0.8, adj = c(0.5, 0))
})
circos.genomicTrack(BED.data, track.height = 0.4,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.genomicTrack(BED.data, track.height = 0.1,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
par(mar = c(1, 1, 1, 1))
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
# circos.initializeWithIdeogram(plotType = NULL)
circos.initializeWithIdeogram(species = "hg38", chromosome.index = paste0("chr", c(1:22, "X", "Y")))
# text(0, 0, "Human Chromosomes", cex = 1)
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
# circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
title("Human Genomics (GRCh38/hg38)")
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA,
bg.col = rep("grey", dim(chr_count)[1]), track.height = 0.05,
panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
# circos.text(mean(xlim), 2.5,
#             facing = "outside", niceFacing = T,
#             sector.name, cex = 0.8, adj = c(0.5, 0))
})
circos.genomicTrack(BED.data, track.height = 0.1,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.genomicTrack(BED.data, track.height = 0, bg.border = NA,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
par(mar = c(1, 1, 1, 1))
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
# circos.initializeWithIdeogram(plotType = NULL)
circos.initializeWithIdeogram(species = "hg38", chromosome.index = paste0("chr", c(1:22, "X", "Y")))
# text(0, 0, "Human Chromosomes", cex = 1)
# Abbreviations of species. e.g. hg19 for human, mm10 for mouse.
# If this value is specified, the function will download cytoBand.txt.gz
# from UCSC website automatically. If there is no cytoband for user's species,
# it will keep on trying to download chromInfo file.
BED.data <- data.frame(hg38.matched[,c(4,6:7,10,14)])
# we assume data is simply a data frame in BED format
# (where the first column is the chromosome name, the
# second and third column are start and end positions,
# and the following columns are associated values)
# circos.genomicRainfall(data.frame(hg38.ring[,c(4,6:7)]), pch = 16, cex = 0.4, col = "#FF000080")
title("Human Genomics (GRCh38/hg38)")
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA,
bg.col = rep("grey", dim(chr_count)[1]), track.height = 0.05,
panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
# circos.text(mean(xlim), 2.5,
#             facing = "outside", niceFacing = T,
#             sector.name, cex = 0.8, adj = c(0.5, 0))
})
circos.genomicTrack(BED.data, track.height = 0, bg.border = NA,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicTrack(BED.data, track.height = 0.001, bg.border = NA,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.genomicTrack(BED.data, track.height = 0.01, bg.border = NA,
panel.fun = function(region, value, ...) {
cex = (value[[1]] - min(value[[1]]))/(max(value[[1]]) - min(value[[1]]))
i = getI(...)
# numeric.column is automatically passed to `circos.genomicPoints()`
circos.genomicPoints(region, value = 1, ...)
})
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
runApp()
runApp()
