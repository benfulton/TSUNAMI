"Transcription_Factor_PPIs",
"TargetScan_microRNA_2017")
enrichr_dbs <- c("GO_Biological_Process_2017b",
"GO_Molecular_Function_2017b",
"GO_Cellular_Component_2017b",
"Jensen_DISEASES",
"Reactome_2016",
"KEGG_2016",
"Transcription_Factor_PPIs",
"TargetScan_microRNA_2017")
paste0(enrichr_dbs, '.csv')
for(i in 1:10){
print(i)
}
for(i in 1:length(enrichr_dbs)){
print(i)
}
for(i in 1:length(enrichr_dbs)){
print(enrichr_dbs[i])#enriched
}
if(separator == ','){
fs <- paste0(enrichr_dbs, '.csv')
}
separator = ','
if(separator == ','){
fs <- paste0(enrichr_dbs, '.csv')
}
fs
for(i in 1:length(enrichr_dbs)){
print(fs[i])#enriched
}
enriched
zip
file.rename
fname = "fname"
if(file.exists(paste0(fname, ".zip"))) {file.rename(paste0(fname, ".zip"), fname)}
file.rename(paste0(fname, ".zip"), fname)
file.exists(paste0(fname, ".zip"))
runApp('Desktop/GeneCoexpression/RGUI_v5')
fs
fs = c(fs, 'genes_list.txt')
fs
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/RGUI_v5')
setwd("Downloads/TASK1")
read.table("115.xlsx")
require(xlsx)
read.xlsx2("115.xlsx")
read.xlsx2("115.xlsx", sheetName = "Sheet1")
# Remove data with lowest 10% variance across samples
percentile <- 9.99/100.
library("openxlsx")
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
read.xlsx("115.xlsx", sheetName = "Sheet1")
read.xlsx("115.xlsx", sheet = 1, startRow = 1, colNames = TRUE)
data =read.xlsx("115.xlsx", sheet = 1, startRow = 1, colNames = TRUE)
View(data)
shiny::runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
head(data)
fname = data[9:dim(data)[2],1]
dim(data)[2]
fname = data[9:dim(data)[1],1]
dim(fname)
dim(data)[1]
data[9:dim(data)[1],1]
fname = data[9:dim(data)[1],1]
fname
dim(fname)
length(fname)
head(fname)
fname <- gsub("\"","",fname) # convert "\"1553418_a_at\"" to "1553418_a_at"
fname
fname2 <- fname
t <- try(gpl <- getGEO("GPL570"))
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
gpltable
gpltable
if (!is.null(gpltable$`Gene Symbol`)){
print("load GPL table with name \"Gene Symbol\"")
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]ifelse(is.nan(input$quicklook_row),100,input$quicklook_row)
}
}
for (i in 1:length(fname)){
print(i)
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]#ifelse(is.nan(input$quicklook_row),100,input$quicklook_row)
}
fname2[54676]
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
for (i in 1:length(fname)){
print(i)
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
install.packages("foreach")
install.packages("foreach")
install.packages("foreach")
for (i in 1:length(fname)){
print(i)
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
foreach(i=1:length(fname)) %dopar% {
print(i)
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
library(foreach)
foreach(i=1:length(fname)) %dopar% {
print(i)
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
for (i in 1:length(fname)){
print(i)
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
foreach(i=1:length(fname)) %dopar% {
print(i)
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
fname2 <- gpltable$`Gene Symbol`[which(gpltable$ID == fname)]
which(gpltable$ID == fname)
fname2 <- gpltable$`Gene Symbol`[which(gpltable$ID == fname)]
fname2 = NULL
fname2 <- gpltable$`Gene Symbol`[which(gpltable$ID == fname)]
head(fnae2)
head(fname2)
for (i in 1:length(fname)){
# print(i)
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
head(fname2)
for (i in 1:length(fname)){
print(which(gpltable$ID == fname[i]))
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
shiny::runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
which(gpltable$ID == "sd")
which(gpltable$ID == c("1007_s_at","10asd07_s_at","1007_s_at"))
which(gpltable$ID == c("1007_s_at","10asd07_s_at","1053_s_at"))
which(gpltable$ID == fname)
c("1007_s_at","10asd07_s_at","1053_s_at")
which(gpltable$ID == c("1007_s_at","10asd07_s_at","1053_s_at"))
which(gpltable$ID == c("1007_s_at",1053_s_at"))
which(gpltable$ID == c("1007_s_at","1053_s_at"))
which(gpltable$ID == list("1007_s_at","1053_s_at"))
which(gpltable$ID == fname)
fname(1:3)
fname[1:3]
which(gpltable$ID == fname[1:3])
which(gpltable$ID == c(fname[1:3],"asd"))
which(gpltable$ID == c(fname[1:3],"asddsf"))
setdiff(fname,fname2)
gpltable$`Gene Symbol`[which(gpltable$ID == fname[1:3])]
gpltable$`Gene Symbol`[which(gpltable$ID == fname[1:4])]
gpltable$`Gene Symbol`[which(gpltable$ID == c(fname[1:3],"asdfasdf"))]
gpltable$`Gene Symbol`[which(gpltable$ID == c(fname[1:3],"asdfasdf"))]
fname3= fname
fname3
rapply(fname3,function(x) gpltable$`Gene Symbol`[which(gpltable$ID == fname3)])
list(fname3)
rapply(list(fname3),function(x) gpltable$`Gene Symbol`[which(gpltable$ID == fname3)])
fname3
fname3 = rapply(list(fname3),function(x) gpltable$`Gene Symbol`[which(gpltable$ID == fname3)])
fname3 = rapply(list(fname3),function(x) gpltable$`Gene Symbol`[which(gpltable$ID == fname3[x])])
fname3 = rapply(list(fname3),function(x) print(x) gpltable$`Gene Symbol`[which(gpltable$ID == fname3[x])])
fname3 = rapply(list(fname3),function(x) print(x))
fname3 = rapply(list(fname3),function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname3[x])]})
fname3 = rapply(list(fname3),function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])]})
fname3 = rapply(list(fname3),function(x){print(x);gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])]})
fname3 = rapply(list(fname3),function(x){print(x);gpltable$`Gene Symbol`[which(gpltable$ID == fname)]})
fname3 = rapply(list(fname3),function(x){print(x);gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
rapply(list(fname3),function(x){print(x);gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
rapply(list(fname3),function(x){gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
rapply(fname3,function(x){print(x);gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
fname3=list(rep(1:54676))
rep(1:54676)
rapply(fname3,function(x){print(x);gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
View(fname3)
rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
fname3=rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
fname3=list(rep(1:54676))
rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == list(fname))]})
rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname[x]]})
fname[5]
rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])]})
View(fname3)
a = rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])]})
a = rapply(list(fname),function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])]})
a = lapply(list(fname),function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])]})
a = lapply(list(fname),function(x){print(x);gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])]})
a = lapply(list(fname),function(x){print(x); gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])]})
fname[54676]
fname = fname[-54676]
a = lapply(list(fname),function(x){print(gpltable$`Gene Symbol`[which(gpltable$ID == fname[x]))]})
a = lapply(list(fname),function(x){print(gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])])})
a = rapply(list(fname),function(x){print(gpltable$`Gene Symbol`[which(gpltable$ID == fname[x])])})
fname3 = list(fname)
rapply(fname3,function(x){print(gpltable$`Gene Symbol`[which(gpltable$ID == fname3[x])])}, how="replace")
View(fname3)
rapply(fname3,function(x){print(gpltable$`Gene Symbol`[which(gpltable$ID == fname3)])}, how="replace")
View(fname3)
View(fname3)
rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname3)]}, how="replace")
rapply(fname3,function(x){gpltable$`Gene Symbol`[which(gpltable$ID == fname3[x])]}, how="replace")
rapply(fname3,function(x){a = gpltable$`Gene Symbol`[which(gpltable$ID == fname3[x])] print(a)}, how="replace")
rapply(fname3,function(x){a = gpltable$`Gene Symbol`[which(gpltable$ID == fname3[x])]; print(a)}, how="replace")
View(fname3)
if (!is.null(gpltable$`Gene Symbol`)){
if(i != which(gpltable$ID == fname)){
print(i)
}
print("load GPL table with name \"Gene Symbol\"")
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
if (!is.null(gpltable$`Gene Symbol`)){
if(i != which(gpltable$ID == fname)){
print(i)
}
print("load GPL table with name \"Gene Symbol\"")
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
fname
if (!is.null(gpltable$`Gene Symbol`)){
for(i in 1:54675){
if(i != which(gpltable$ID == fname)){
print(i)
}
print("load GPL table with name \"Gene Symbol\"")
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
}
if (!is.null(gpltable$`Gene Symbol`)){
print("load GPL table with name \"Gene Symbol\"")
for(i in 1:54675){
if(i != which(gpltable$ID == fname[i])){
print(i)
}
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
}
fname[54629]
fname[54635]
gpltable$`Gene Symbol`[which(gpltable$ID == fname[54635])]
gpltable$`Gene Symbol`[which(gpltable$ID == fname[54636])]
gpltable$`Gene Symbol`[which(gpltable$ID == fname[54637])]
gpltable$`Gene Symbol`[which(gpltable$ID == fname[54638])]
fname2 <- gpltable$`Gene Symbol`[which(gpltable$ID == fname)]
which(gpltable$ID == fname[54638])
which(gpltable$ID == fname[54637])
which(gpltable$ID == fname[54629])
which(gpltable$ID == fname[54628])
which(gpltable$ID == fname[54629])
fname[54629]
fname2[54629]
fname2[54628]
fname2[54630]
fname2[54631]
fname2[54632]
gpltable$`Gene Symbol`[which(gpltable$ID == fname[54632])]
if (!is.null(gpltable$`Gene Symbol`)){
print("load GPL table with name \"Gene Symbol\"")
for(i in 1:54675){
if(is.null(gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])])){
print(i)
}
if(is.nan(gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])])){
print(i)
}
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
}
for(i in 54000:54675){
if(is.null(gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])])){
print(i)
}
if(is.nan(gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])])){
print(i)
}
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
for(i in 1:54675){
if(is.null(gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])])){
print(i)
}
if(is.nan(gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])])){
print(i)
}
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
fname3 =which(gpltable$ID == fname
fname3 =which(gpltable$ID == fname)
fname3 =which(gpltable$ID != fname)
gpltable$ID[54629]
fname[54629]
which(gpltable$ID == fname[54629])
which(gpltable$ID[54629] == fname)
head(gpltable)
which(gpltable$ID[1])
gpltable$ID[1]
gpltable$`Gene Symbol`[1]
gpltable$`Gene Symbol`[55555]
fname3 = which(gpltable$ID == fname)
which(c(1,2,3,4,5),c(2,3,4,5,6)
)
which(c(1,2,3,4,5)==c(2,3,4,5,6))
c(1,2,3,4,5)
which(c("1","2","3","4","5")==c("2","3","4","5","6"))
which(c("1","2","3","4","5")==list("2","3","4","5","6"))
which(list("1","2","3","4","5")==list("2","3","4","5","6"))
gpltable$ID[1,2,3]
gpltable$ID[1:3]
which(c("1","2","3","4","5")==c("2","3","4","5","6"))
which(c("1","2","3","4","5")==c("2","3","4","5","6s"))
which(c("1","2","3","4s","5")==c("2","3","4s","5","6s"))
which(c(1,2,3,4,5)==2)
which(c(1,2,3,4,5)==[2,3,4])
which(c(1,2,3,4,5)==c(1,2,3)
)
which(c(1,2,3,4,5)==c(1,2,3))
setequal(c(1,2,3),c(2,3,4))
is.element(c(1,2,3),c(2,3,4))
match(c(1,2,3),c(2,3,4))
match(gpltable$ID == fname[i])
match(gpltable$ID == fname)
match(gpltable$ID == fname)
match(unlist(gpltable$ID) == unlist(fname))
match(gpltable$ID == fname,table=NULL)
match(gpltable$ID,fname)
match(gpltable$ID,fname[54639])
match(gpltable$ID,fname[54639])
is.nan(match(gpltable$ID,fname))
fname2 <- gpltable$`Gene Symbol`[match(gpltable$ID,fname)]
if (!is.null(gpltable$`Gene Symbol`)){
print("load GPL table with name \"Gene Symbol\"")
for(i in 1:54675){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
}
fname2_clone <- gpltable$`Gene Symbol`[match(gpltable$ID,fname)]
setequal(fname2,fname2_clone)
all.equal(fname2,fname2_clone)
for(i in 1:54675){
if(fname2[i]!=fname2_clone[i]){print(i)}
}
for(i in 1:54675){
if(fname2[i]!=fname2_clone[i]){
print(sprintf("%d  %s  %s",i,fname2[i],fname2_clone[i]))
}
}
for(i in 1:54675){
if(fname2[i]!=fname2_clone[i]){
print(sprintf("%d  '%s'  '%s'",i,fname2[i],fname2_clone[i]))
}
}
which(gpltable$ID == fname[54629])
fname[54629]
gpltable$ID[54639]
gpltable$`Gene Symbol`[54639]
match(gpltable$ID,"AFFX-hum_alu_at")
match(gpltable$ID,"AFFX-hum_alu_at")[54639]
match(c(1,2,3),c(2,3,4))
match(c(2,3,4),c(1,2,3,))
match(c(2,3,4),c(1,2,3))
fname2_clone <- gpltable$`Gene Symbol`[match(fname,gpltable$ID)]
for(i in 1:54675){
if(fname2[i]!=fname2_clone[i]){
print(sprintf("%d  '%s'  '%s'",i,fname2[i],fname2_clone[i]))
}
}
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
is.na(NA)
is.nan(NA)
is.nan(NaN)
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
# 03/13/2017 Zhi Huang
library(shiny)
library(rsconnect)
library(plyr)
library(data.table)
library(genefilter)
library(Biobase)
library(rPython)
library(WGCNA)
library(GEOquery)
library(dplyr)
library(enrichR)
library(DT)
library(reticulate)
use_python("/Users/zhi/anaconda2/bin/python")
setwd('/Users/zhi/Desktop/TBI-TSUNAMI/RGUI_v5/')
data <- NULL
GEO <- NULL
finalExp <- NULL
finalSym <- NULL
finalSymChar <- NULL
text <- NULL
geneCharVector_global <- NULL
eigengene_matrix <- NULL
#   +------------------------------------------------------------+
#   |
#   |
#   |                         Load Data
#   |
#   |
#   +--------------------------------
data_in = as.matrix(readLines('../matlab_old/RNAdata.csv'), sep = '\n')
data_temp = strsplit(data_in, split=",")
max.length <- max(sapply(data_temp, length))
data_temp <- lapply(data_temp, function(v) { c(v, rep(NA, max.length-length(v)))})
data_temp <- data.frame(do.call(rbind, data_temp))
if(data_temp[dim(data_temp)[1],1] == "!series_matrix_table_end"){
print("remove last row with \"!series_matrix_table_end\" ")
data_temp = data_temp[-dim(data_temp)[1],]
}
data <- data_temp[-1,]
print("CSV / txt file Processed.")
print(sprintf("Number of Genes: %d",dim(data)[1]))
print(sprintf("Number of Samples: %d",(dim(data)[2]-1)))
#   +------------------------------------------------------------+
#   |
#   |
#   |                      Cleaning the Data
#   |
#   |
#   +--------------------------------
source("utils.R")
RNA <- as.matrix(data[, 2:dim(data)[2]])
class(RNA) <- "numeric"
geneID <- data.frame(data[, 1])
print(dim(RNA))
print(dim(geneID))
# convert na to 0
RNA[is.na(RNA)] <- 0
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- 20/100.
percentile
# save(RNA, file="/Users/zhi/Desktop/RNA.Rdata")
if (percentile > 0){
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
} else {
RNA_filtered1 = RNA
geneID_filtered1 = geneID
}
print(dim(RNA_filtered1))
quantile(RNA, percentile)[[1]], ]
quantile(RNA, percentile)[[1]]
apply(RNA,1,max)
apply
RNA
RNA[is.na(RNA)] <- 0
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- 20/100.
# save(RNA, file="/Users/zhi/Desktop/RNA.Rdata")
if (percentile > 0){
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
} else {
RNA_filtered1 = RNA
geneID_filtered1 = geneID
}
print(dim(RNA_filtered1))
# Remove data with lowest 10% variance across samples
percentile <- 9.99/100.
if (percentile > 0){
index <- varFilter2(eset = RNA_filtered1, var.cutoff = percentile)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
} else {
RNA_filtered2 = RNA_filtered1
geneID_filtered2 = geneID_filtered1
}
print(dim(RNA_filtered2))
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- 20/100.
quantile(RNA, 20)
quantile(RNA, 0.8)
quantile(RNA, percentile)[[1]]
quantile(RNA, 0.8)[[1]]
RNA[apply(RNA,1,max) > 1099.133, ]
length(RNA[apply(RNA,1,max) > 1099.133, ])
dim(RNA[apply(RNA,1,max) > 1099.133, ])
max
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- 20/100.
# save(RNA, file="/Users/zhi/Desktop/RNA.Rdata")
if (percentile > 0){
RNA_filtered1 = RNA[apply(RNA,1,sum) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,sum) > quantile(RNA, percentile)[[1]], ]
} else {
RNA_filtered1 = RNA
geneID_filtered1 = geneID
}
print(dim(RNA_filtered1))
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
runApp('~/Desktop/TBI-TSUNAMI/RGUI_v8')
