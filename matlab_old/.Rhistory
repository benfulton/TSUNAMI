install.packages('rsconnect')
rsconnect::setAccountInfo(name='lmqcm', token='64F2355C0192BD37461BA5C4B56A0AA6', secret='h8QnwfRJK+qUA3Bq9rjEyTlUyTdM3rw+dyqEMRNN')
library(rsconnect)
install.packages('rsconnect')
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
library(devtools)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
library(WGCNA)
install.packages('rsconnect')
install.packages('rsconnect')
install.package("RCurl")
install.package("RCurl")
install.packages('rsconnect')
install.packages('rsconnect')
install.packages("ggplot2", lib="/home/bli/src/piPipes/Rlib")
install.packages('rsconnect')
install.packages("matconv")
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(shiny)
runExample("06_tabsets")
library(shiny)
runExample("10_download")
runExample("07_widgets")
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("More Widgets"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Specify the number of observations to view ----
numericInput("obs", "Number of observations to view:", 10),
# Include clarifying text ----
helpText("Note: while the data view will show only the specified",
"number of observations, the summary will still be based",
"on the full dataset."),
# Input: actionButton() to defer the rendering of output ----
# until the user explicitly clicks the button (rather than
# doing it immediately when inputs change). This is useful if
# the computations required to render output are inordinately
# time-consuming.
actionButton("update", "Update View")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Header + summary of distribution ----
h4("Summary"),
verbatimTextOutput("summary"),
# Output: Header + table of distribution ----
h4("Observations"),
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
# Note that we use eventReactive() here, which depends on
# input$update (the action button), so that the output is only
# updated when the user clicks the button
datasetInput <- eventReactive(input$update, {
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
}, ignoreNULL = FALSE)
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
# The use of isolate() is necessary because we don't want the table
# to update whenever input$obs changes (only when the user clicks
# the action button)
output$view <- renderTable({
head(datasetInput(), n = isolate(input$obs))
})
}
# Create Shiny app ----
shinyApp(ui, server)
library(shiny)
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("More Widgets"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a dataset ----
selectInput("dataset", "Choose a method:",
choices = c("lmQCM", "WGCNA")),
# Input: Specify the number of observations to view ----
numericInput("obs", "Number of observations to view:", 10),
numericInput("obs", "Number of observations to view:", 10),
numericInput("obs", "Number of observations to view:", 10),
numericInput("obs", "Number of observations to view:", 10),
# Include clarifying text ----
helpText("Note: while the data view will show only the specified",
"number of observations, the summary will still be based",
"on the full dataset."),
# Input: actionButton() to defer the rendering of output ----
# until the user explicitly clicks the button (rather than
# doing it immediately when inputs change). This is useful if
# the computations required to render output are inordinately
# time-consuming.
actionButton("update", "Update View")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Header + summary of distribution ----
h4("Summary"),
verbatimTextOutput("summary"),
# Output: Header + table of distribution ----
h4("Observations"),
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
# Note that we use eventReactive() here, which depends on
# input$update (the action button), so that the output is only
# updated when the user clicks the button
datasetInput <- eventReactive(input$update, {
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
}, ignoreNULL = FALSE)
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
# The use of isolate() is necessary because we don't want the table
# to update whenever input$obs changes (only when the user clicks
# the action button)
output$view <- renderTable({
head(datasetInput(), n = isolate(input$obs))
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("06_tabsets")
runExample("06_tabsets")
runExample("03_reactivity")
runExample("04_mpg")
runExample("08_html")
runExample("09_upload")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("06_tabsets")
runExample("07_widgets")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("07_widgets")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny')
rock
input
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("09_upload")
runExample("11_timer")
runExample("03_reactivity")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("03_reactivity")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("03_reactivity")
# switch(input$dataset,
#        "lmQCM" = lmQCM,
#        "WGCNA" = WGCNA)
# switch(input$dataset,
#        "lmQCM" = lmQCM,
#        "WGCNA" = WGCNA)
# switch(input$dataset,
#        "lmQCM" = lmQCM,
#        "WGCNA" = WGCNA)
switch(input$dataset,
"lmQCM" = lmQCM,
"WGCNA" = WGCNA)
switch(input$dataset,
"lmQCM" = lmQCM,
"WGCNA" = WGCNA)
runExample("02_text")
runExample("02_text")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("04_mpg")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("04_mpg")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("04_mpg")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("04_mpg")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("09_upload")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("09_upload")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('main.R')
runExample("09_upload")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("06_tabsets")
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runApp('/media/zhi/Drive3/GeneCoexpression/shiny/main.R')
runExample("06_tabsets")
setwd("/media/zhi/Drive3/GeneCoexpression/matlab_old");
data<-read.csv("./RNAdata.csv", header=T, stringsAsFactors=F)
# Step 1
RNA <- as.numeric(data[2:dim(data)[1], 2:dim(data)[2]])
dim(data)[1]
# Step 1
RNA <- data[2:dim(data)[1], 2:dim(data)[2]]
View(RNA)
View(RNA)
View(data)
# Step 1
RNA <- as.numeric(data[1:dim(data)[1], 2:dim(data)[2]])
unlist(data[1:dim(data)[1], 2:dim(data)[2]])
# Step 1
RNA <- as.numeric(unlist(data[1:dim(data)[1], 2:dim(data)[2]]))
# Step 1
RNA <- data.frame(as.numeric(unlist(data[1:dim(data)[1], 2:dim(data)[2]])))
View(RNA)
# Step 1
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
View(data)
RNA <- data.frame(RNA)
View(RNA)
# Step 1
RNA <- as.numeric(data.frame(as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])))
RNA <- data.frame(as.matrix(data[1:dim(data)[1], 2:dim(data)[2]]))
row.names(RNA) <- NULL
col.names(RNA) <- NULL
column.names(RNA) <- NULL
.matrix(data[1:dim(data)[1], 2:dim(data)[2]]))
rownames(RNA) <- NULL
colnames(RNA) <- NULL
source('/media/zhi/Drive3/GeneCoexpression/shiny/test.R', echo=TRUE)
setwd("/media/zhi/Drive3/GeneCoexpression/matlab_old");
data<-read.csv("./RNAdata.csv", header=T, stringsAsFactors=F)
# Step 1
RNA <- data.frame(as.matrix(data[1:dim(data)[1], 2:dim(data)[2]]))
rownames(RNA) <- NULL
colnames(RNA) <- NULL
View(RNA)
# Step 1
RNA <- data.frame(as.matrix(data[1:dim(data)[1], 2:dim(data)[2]]))
rownames(RNA) <- NULL
View(RNA)
colnames(RNA) <- NULL
View(RNA)
RNA <- as.numeric(RNA)
rownames(RNA) <- NULL
colnames(RNA) <- NULL
RNA <- as.numeric(RNA)
# Step 1
RNA <- data.frame(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data[2:dim(data)[1], 1]
geneID
geneID <- data.frame(data[2:dim(data)[1], 1])
View(geneID)
geneID <- data.frame(data[1:dim(data)[1], 1])
View(geneID)
View(geneID)
View(geneID)
install.packages(genefilter)
install.packages("genefilter")
nsFilter
genefilter
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
genefilter
