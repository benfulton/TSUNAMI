print(hello)
print('hello')
nba
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nb
nba
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
View(nba)
View(nba)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
View(nba)
View(nba)
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
# http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),] #sort data
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,1
install.packages(rsconnect)
install.packages(rsconnected)
install.packages("rsconnected")
install.packages("rsconnected")
install.packages("rsconnected")
install.packages("rsconnect")
library(rsconnect)
install.packages("shiny")
install.packages("shiny")
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
genefilter
library(genefilter)
library(shiny); runApp('Desktop/GeneCoexpression/shiny/main.R')
install.packages("rPython")
text <- ""
library(shiny); runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main.R')
library(shiny); runApp('Desktop/GeneCoexpression/shiny/main2.R')
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library(shiny); runApp('Desktop/GeneCoexpression/shiny/main2.R')
runApp('Desktop/GeneCoexpression/shiny/main2.R')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/shiny-examples-master/016-knitr-pdf')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/shiny-examples-master/016-knitr-pdf')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
# Credit to wnchang@iu.edu 2017-10-11
# Edited by Zhi Huang 01/26/2018
#==========================first, log data===========================================
setwd("/Users/zhi/Desktop/GeneCoexpression/WGCNA"); #mac
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data[,1]
row.names(RNA) <- geneID
datExpr <- t(RNA) # gene should be colnames, sample should be rownames
# datExpr <- log(datExpr + 1) # uncomment if don't need logarithm
dim(datExpr)
#=====================================================================================
#
#  Code chunk 1 : basic setting of WGCNA
#
#=====================================================================================
# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.1
workingDir = "/Users/zhi/Desktop/GeneCoexpression/WGCNA";
setwd(workingDir);
# Load the WGCNA package
library(WGCNA)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments.
# See note above.
allowWGCNAThreads() #enableWGCNAThreads()
#=====================================================================================
#
#  Code chunk 2 : choose the power
#
#=====================================================================================
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(12, 9)
pdf(file = "COAD.pdf")
par(mfrow = c(1,2));
cex1 = 0.9;
sft$fitIndices[,1]
-sign(sft$fitIndices[,3])*sft$fitIndices[,2]
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/shiny-examples-master/021-selectize-plot')
install.packages("map")
install.packages("maps")
runApp('~/Desktop/GeneCoexpression/shiny-examples-master/021-selectize-plot')
runApp('~/Desktop/GeneCoexpression/shiny-examples-master/021-selectize-plot')
runApp('~/Desktop/GeneCoexpression/shiny-examples-master/021-selectize-plot')
runApp('~/Desktop/GeneCoexpression/shiny-examples-master/021-selectize-plot')
runApp('~/Desktop/GeneCoexpression/shiny-examples-master/021-selectize-plot')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
net = blockwiseModules(datExpr, power = 6,
TOMType = "unsigned", minModuleSize = 30,     #30,
reassignThreshold = 0, mergeCutHeight =  0.25,    # 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = FALSE,
saveTOMFileBase = "femaleMouseTOM",
verbose = 3)
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
ans = ""
length(ans)
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
nchar("..a.sdfasdfasdf")
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
# Credit to wnchang@iu.edu 2017-10-11
# Edited by Zhi Huang 01/26/2018
#==========================first, log data===========================================
setwd("/Users/zhi/Desktop/GeneCoexpression/WGCNA"); #mac
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data[,1]
row.names(RNA) <- geneID
datExpr <- t(RNA) # gene should be colnames, sample should be rownames
# datExpr <- log(datExpr + 1) # uncomment if don't need logarithm
dim(datExpr)
#=====================================================================================
#
#  Code chunk 1 : basic setting of WGCNA
#
#=====================================================================================
# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.1
workingDir = "/Users/zhi/Desktop/GeneCoexpression/WGCNA";
setwd(workingDir);
# Load the WGCNA package
library(WGCNA)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments.
# See note above.
allowWGCNAThreads() #enableWGCNAThreads()
#=====================================================================================
#
#  Code chunk 2 : choose the power
#
#=====================================================================================
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(12, 9)
pdf(file = "COAD.pdf")
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
#=====================================================================================
#
#  Code chunk 3 : cal net
#                 in this part, we need to pay attention to parameters which are
#                 'power', 'minModuliSize', and 'mergeCutHeight'
#
#=====================================================================================
net = blockwiseModules(datExpr, power = 6,
TOMType = "unsigned", minModuleSize = 30,     #30,
reassignThreshold = 0, mergeCutHeight =  0.25,    # 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = FALSE,
saveTOMFileBase = "femaleMouseTOM",
verbose = 3)
netcolors = net$colors
matrix<- data.frame(cbind(geneID, netcolors))
geneCharVector <- matrix(0, nrow = 0, ncol = length(unique(netcolors))-1)
text <- ""
for (i in 1: length(unique(netcolors))-1){
geneChar <- matrix[which(matrix$netcolors == i), 1]
geneCharVector[i] <- list(geneChar)
text <- paste(text, capture.output(cat(geneChar, sep=' ')), sep="\n")
}
dim(text)
text
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
geneCharVector[1]
geneCharVector[2]
geneCharVector[3]
geneCharVector[4]
geneCharVector[5]
runApp('~/Desktop/GeneCoexpression/RGUI')
dim(geneCharVector)
data.frame(geneCharVector)
data <- do.call(rbind, lapply(geneCharVector,
function(x) paste(x,collapse=" ")))
data
as.data.frame(geneCharVector)
plyr::ldply(geneCharVector, rbind)
geneCharVector
max.length <- max(sapply(geneCharVector, length))
max.length
## Compute maximum length
max.length <- max(sapply(geneCharVector, length))
## Add NA values to list elements
geneCharVector2 <- lapply(geneCharVector, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
geneCharVector2 <- do.call(rbind, geneCharVector2)
## Add NA values to list elements
geneCharVector2 <- lapply(geneCharVector, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
geneCharVector2 <- data.frame(do.call(rbind, geneCharVector2))
runApp('~/Desktop/GeneCoexpression/RGUI')
runApp('~/Desktop/GeneCoexpression/RGUI')
