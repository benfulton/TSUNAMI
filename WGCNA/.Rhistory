# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
print(sprintf("data dimension before remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
print(sprintf("data dimension before remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
uniGene_temp <- subset(uniGene, nchar(as.character(uniGene)) > 0)
tmpExp <- subset(tmpExp, nchar(as.character(uniGene)) > 0)
uniGene <- uniGene_temp
print(sprintf("data dimension after remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/shiny-examples-master/007-widgets')
runApp('Desktop/GeneCoexpression/shiny-examples-master/015-layout-sidebar')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
matrix(rexp(200, rate=.1), ncol=20)
head(data.frame(matrix(rexp(200, rate=.1), ncol=20)))
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v4')
runApp('Desktop/GeneCoexpression/RGUI_v4')
runApp('Desktop/GeneCoexpression/RGUI_v4')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v4')
runApp('Desktop/GeneCoexpression/RGUI_v4')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v4')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/shiny-examples-master/012-datatables')
runApp('Desktop/GeneCoexpression/shiny-examples-master/012-datatables')
runApp('Desktop/GeneCoexpression/RGUI_v5')
library(shiny)
library(rsconnect)
library(plyr)
library(data.table)
library(genefilter)
library(Biobase)
library(rPython)
library(WGCNA)
library(GEOquery)
library(dplyr)
library(enrichR)
annotation
install.packages(c("shiny", "ggplot2", "VennDiagram", "RColorBrewer", "reshape2", "xtable", "gplots", "RMySQL"))
source("https://bioconductor.org/biocLite.R")
biocLite(c("GenomicRanges", "ChIPpeakAnno", "biomaRt", "GSEABase", "GO.db", "GOstats", "TxDb.Mmusculus.UCSC.mm9.knownGene", "TxDb.Mmusculus.UCSC.mm10.knownGene", "TxDb.Hsapiens.UCSC.hg18.knownGene", "TxDb.Hsapiens.UCSC.hg19.knownGene", "TxDb.Hsapiens.UCSC.hg38.knownGene", "org.Hs.eg.db", "org.Mm.eg.db"))
shiny::runApp('Desktop/annoPeak')
# Credit to wnchang@iu.edu 2017-10-11
# Edited by Zhi Huang 01/26/2018
#==========================first, log data===========================================
setwd("/Users/zhi/Desktop/GeneCoexpression/WGCNA"); #mac
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data[,1]
row.names(RNA) <- geneID
datExpr <- t(RNA) # gene should be colnames, sample should be rownames
# datExpr <- log(datExpr + 1) # uncomment if don't need logarithm
datExpr = datExpr[,1:2000]
dim(datExpr)
#=====================================================================================
#
#  Code chunk 1 : basic setting of WGCNA
#
#=====================================================================================
# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.1
workingDir = "/Users/zhi/Desktop/GeneCoexpression/WGCNA";
setwd(workingDir);
# Load the WGCNA package
library(WGCNA)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments.
# See note above.
allowWGCNAThreads() #enableWGCNAThreads()
#=====================================================================================
#
#  Code chunk 2 : choose the power
#
#=====================================================================================
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(12, 9)
pdf(file = "COAD.pdf")
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
#=====================================================================================
#
#  Code chunk 3 : cal net
#                 in this part, we need to pay attention to parameters which are
#                 'power', 'minModuliSize', and 'mergeCutHeight'
#
#=====================================================================================
net = blockwiseModules(datExpr, power = 6,
TOMType = "unsigned", minModuleSize = 30,     #30,
reassignThreshold = 0, mergeCutHeight =  0.25,    # 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = FALSE,
saveTOMFileBase = "femaleMouseTOM",
verbose = 3)
library(GEOquery)
gset <- getGEO("GSE17537", GSEMatrix=TRUE, AnnotGPL=FALSE)
shiny::runApp('~/Desktop/GeneCoexpression/RGUI_v5')
#==========================first, log data===========================================
setwd("/Users/zhi/Desktop/GeneCoexpression/WGCNA"); #mac
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data[,1]
row.names(RNA) <- geneID
datExpr <- t(RNA) # gene should be colnames, sample should be rownames
# datExpr <- log(datExpr + 1) # uncomment if don't need logarithm
datExpr = datExpr[,1:2000]
dim(datExpr)
#=====================================================================================
#
#  Code chunk 1 : basic setting of WGCNA
#
#=====================================================================================
# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.1
workingDir = "/Users/zhi/Desktop/GeneCoexpression/WGCNA";
setwd(workingDir);
# Load the WGCNA package
library(WGCNA)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments.
# See note above.
allowWGCNAThreads() #enableWGCNAThreads()
#=====================================================================================
#
#  Code chunk 2 : choose the power
#
#=====================================================================================
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(12, 9)
pdf(file = "COAD.pdf")
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
#=====================================================================================
#
#  Code chunk 3 : cal net
#                 in this part, we need to pay attention to parameters which are
#                 'power', 'minModuliSize', and 'mergeCutHeight'
#
#=====================================================================================
net = blockwiseModules(datExpr, power = 6,
TOMType = "unsigned", minModuleSize = 30,     #30,
reassignThreshold = 0, mergeCutHeight =  0.25,    # 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = FALSE,
saveTOMFileBase = "femaleMouseTOM",
verbose = 3)
netcolors = net$colors
matrix<- data.frame(cbind(geneID, netcolors))
geneCharVector <- matrix(0, nrow = 0, ncol = length(unique(netcolors))-1)
# Credit to wnchang@iu.edu 2017-10-11
# Edited by Zhi Huang 01/26/2018
#==========================first, log data===========================================
setwd("/Users/zhi/Desktop/GeneCoexpression/WGCNA"); #mac
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data[,1]
row.names(RNA) <- geneID
datExpr <- t(RNA) # gene should be colnames, sample should be rownames
# datExpr <- log(datExpr + 1) # uncomment if don't need logarithm
datExpr = datExpr[,1:2000]
dim(datExpr)
#=====================================================================================
#
#  Code chunk 1 : basic setting of WGCNA
#
#=====================================================================================
# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.1
workingDir = "/Users/zhi/Desktop/GeneCoexpression/WGCNA";
setwd(workingDir);
# Load the WGCNA package
library(WGCNA)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments.
# See note above.
allowWGCNAThreads() #enableWGCNAThreads()
#=====================================================================================
#
#  Code chunk 2 : choose the power
#
#=====================================================================================
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(12, 9)
pdf(file = "COAD.pdf")
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
#=====================================================================================
#
#  Code chunk 3 : cal net
#                 in this part, we need to pay attention to parameters which are
#                 'power', 'minModuliSize', and 'mergeCutHeight'
#
#=====================================================================================
net = blockwiseModules(datExpr, power = 6,
TOMType = "unsigned", minModuleSize = 30,     #30,
reassignThreshold = 0, mergeCutHeight =  0.25,    # 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = FALSE,
saveTOMFileBase = "femaleMouseTOM",
verbose = 3)
shiny::runApp('~/Desktop/GeneCoexpression/RGUI_v5')
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
shiny::runApp('~/Desktop/GeneCoexpression/RGUI_v5')
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
geneCharVector <- matrix(0, nrow = 0, ncol = length(unique(netcolors))-1)
geneCharVector
## Add NA values to list elements
geneCharVector2 <- lapply(geneCharVector, function(v) { c(v, labels2colors(v), rep(NA, max.length-length(v)))})
geneCharVector2
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
load("/Users/zhi/Desktop/geneCharVector2.Rdata")
geneCharVector2
geneCharVector2[[13]][1:20]
geneCharVector2[[13]][1:100]
geneCharVector2[[12]][1:100]
geneCharVector2[[13]][1:100]
geneCharVector2[[11]][1:100]
labels2colors(v)
labels2colors(1)
labels2colors(2)
geneCharVector2[[1]]
labels2colors(12)
labels2colors(123)
labels2colors(12)
rep(NA, max.length-length(1)))
rep(NA, max.length-length(1))
rep(NA, 20-length(1))
rep(NA, 2-length(1))
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
strsplit("abc /// asd /// sd", " /// ", fixed = FALSE, perl = FALSE, useBytes = FALSE)
strsplit("abc /// asd /// sd", " /// ")
genes_str <- c('PHF14 /// RBM32','RBM3','Nlrx1','MSL1','PHF21A','ARL10','INSR')
genes_str
strsplit(genes_str, " /// ")
res = strsplit(genes_str, " /// ")
unlist(res)
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
