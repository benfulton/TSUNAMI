gset[2]
gset[[1]]
gset[[2]]
gset[[3]]
gset[[4]]
gset[[5]]
gset[[6]]
gset[[7]]
gset[1,1]
gset[1,2]
gset[2,2]
edata$annotation
annotation(gset)
edata
dim(edata)
dim(edata)[1]
print(sprintf("Number of Samples: ",dim(edata)[2]-1))
dim(edata)[2]
dim(edata)[2]-1
print(sprintf("Annotation Platform: %s",annotation(gset)))
print(sprintf("Number of Genes: %d",dim(edata)[1]))
print(sprintf("Number of Samples: %d",dim(edata)[2]-1))
runApp('Desktop/GeneCoexpression/RGUI')
edata(1:4,1:$)
edata(1:4,1:5)
edata(1:4,1:5)
edata[1:4,1:3]
protocolData(geset)
protocolData(gset)
description(gset)
notes(gset)
storageMode(gset)
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
gset
Meta(gset)
GPLList
GPLList(GPL579)
GPLList(GPL570)
GPLList("GPL570")
GPLList(gset)
GPLList(eset)
GPLList(edata)
GDS2MA(gset,GPL="GPL570")
getGEO("GPL570")
gpl <- getGEO('GPL570')
Meta(gpl)$title
Meta(gpl)
gpl
gpl
gpl$Gene
gpl[1,1]
gpl[1]
Meta(gpl)
gpl$Gene.Symbol
fData(data)
GPLList(gpl)
pData(gpl)
Table(gpl)
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
gpltable[1,]
gpltable%ID
gpltable$ID
gpltable$`Gene Symbol`
gpltable$ID
which(gpltable$ID == "1553559_at")
gpltable[953,]
gpltable[idx,]$`Gene Symbol`
idx
idx <- which(gpltable$ID == "1553559_at")
gpltable[idx,]$`Gene Symbol`
gpltable[953,]
gpltable[idx,]$`Gene Symbol`
edata
fname
row.names(data)
fname
length(fname)
fname[1]
for (i in 1:length(fname)){
which(gpltable$ID == fname[i])
}
runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
try(gpl <- getGEO("GPL570"))
t <- try(gset <- getGEO("GSE17537", GSEMatrix=TRUE, AnnotGPL=FALSE)) #AnnotGPL default is FALSE
edata <- exprs(gset) #This is the expression matrix
# pdata <- pData(gset) # data.frame of phenotypic information.
fname <<- featureNames(gset) # e.g. 12345_at
edata <- exprs(gset) #This is the expression matrix
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
edata <- exprs(gset) #This is the expression matrix
# pdata <- pData(gset) # data.frame of phenotypic information.
fname <<- featureNames(gset) # e.g. 12345_at
data <<- cbind(fname, edata)
data <- cbind(fname, edata)
row.names(data) <- seq(1, length(fname))
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
fname2 <- fname
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
print(dim(data))
print(length(fname2))
data[,1] <<- fname2
data[,1] <- fname2
row.names(data) <- seq(1, length(fname2))
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
class(RNA) <- "numeric"
geneID <- data.frame(data[1:dim(data)[1], 1])
print(dim(RNA))
print(dim(geneID))
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- .2
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
# Remove data with lowest 10% variance across samples
percentile <- .1
index <- varFilter2(eset = RNA_filtered1, var.cutoff = percentile)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
print(sprintf("data dimension before remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
uniGene <- subset(uniGene, nchar(as.character(uniGene)) > 0)
tmpExp <- subset(tmpExp, nchar(as.character(uniGene)) > 0)
print(sprintf("data dimension after remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
uniGene
nchar(as.character(uniGene))
view(uniGene)
uniGene[999:2999]
uniGene[999:2999,]
uniGene[1000:1400]
uniGene[2001:3000]
sum(as.numeric(nchar(as.character(uniGene)) > 0))
sum(as.numeric(nchar(as.character(uniGene)) > 0))
sum(as.numeric(nchar(as.character(uniGene)) == 0))
sum(as.numeric(nchar(as.character(uniGene)) == 0))
length(uniGene)
length(uniGene)
length(geneID_filtered2)
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
print(sprintf("data dimension before remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
print(sprintf("data dimension before remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
uniGene_temp <- subset(uniGene, nchar(as.character(uniGene)) > 0)
tmpExp <- subset(tmpExp, nchar(as.character(uniGene)) > 0)
uniGene <- uniGene_temp
print(sprintf("data dimension after remove gene with empty symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/shiny-examples-master/007-widgets')
runApp('Desktop/GeneCoexpression/shiny-examples-master/015-layout-sidebar')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v2')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
matrix(rexp(200, rate=.1), ncol=20)
head(data.frame(matrix(rexp(200, rate=.1), ncol=20)))
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
runApp('Desktop/GeneCoexpression/RGUI_v3')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v4')
runApp('Desktop/GeneCoexpression/RGUI_v4')
runApp('Desktop/GeneCoexpression/RGUI_v4')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v4')
runApp('Desktop/GeneCoexpression/RGUI_v4')
shiny::runApp('Desktop/GeneCoexpression/RGUI_v4')
runApp('Desktop/GeneCoexpression/RGUI_v5')
runApp('Desktop/GeneCoexpression/shiny-examples-master/012-datatables')
runApp('Desktop/GeneCoexpression/shiny-examples-master/012-datatables')
runApp('Desktop/GeneCoexpression/RGUI_v5')
library(shiny)
library(rsconnect)
library(plyr)
library(data.table)
library(genefilter)
library(Biobase)
library(rPython)
library(WGCNA)
library(GEOquery)
library(dplyr)
library(enrichR)
annotation
install.packages(c("shiny", "ggplot2", "VennDiagram", "RColorBrewer", "reshape2", "xtable", "gplots", "RMySQL"))
source("https://bioconductor.org/biocLite.R")
biocLite(c("GenomicRanges", "ChIPpeakAnno", "biomaRt", "GSEABase", "GO.db", "GOstats", "TxDb.Mmusculus.UCSC.mm9.knownGene", "TxDb.Mmusculus.UCSC.mm10.knownGene", "TxDb.Hsapiens.UCSC.hg18.knownGene", "TxDb.Hsapiens.UCSC.hg19.knownGene", "TxDb.Hsapiens.UCSC.hg38.knownGene", "org.Hs.eg.db", "org.Mm.eg.db"))
shiny::runApp('Desktop/annoPeak')
#==========================first, log data===========================================
setwd("/Users/zhi/Desktop/GeneCoexpression/WGCNA"); #mac
data<-read.csv("../matlab_old/RNAdata.csv", header=T, stringsAsFactors=F)
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
geneID <- data[,1]
row.names(RNA) <- geneID
datExpr <- t(RNA) # gene should be colnames, sample should be rownames
# datExpr <- log(datExpr + 1) # uncomment if don't need logarithm
datExpr = datExpr[,1:2000]
dim(datExpr)
#=====================================================================================
#
#  Code chunk 1 : basic setting of WGCNA
#
#=====================================================================================
# Display the current working directory
getwd();
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.1
workingDir = "/Users/zhi/Desktop/GeneCoexpression/WGCNA";
setwd(workingDir);
# Load the WGCNA package
library(WGCNA)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments.
# See note above.
allowWGCNAThreads() #enableWGCNAThreads()
#=====================================================================================
#
#  Code chunk 2 : choose the power
#
#=====================================================================================
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(12, 9)
pdf(file = "COAD.pdf")
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
#=====================================================================================
#
#  Code chunk 3 : cal net
#                 in this part, we need to pay attention to parameters which are
#                 'power', 'minModuliSize', and 'mergeCutHeight'
#
#=====================================================================================
net = blockwiseModules(datExpr, power = 6,
TOMType = "unsigned", minModuleSize = 30,     #30,
reassignThreshold = 0, mergeCutHeight =  0.25,    # 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = FALSE,
saveTOMFileBase = "femaleMouseTOM",
verbose = 3)
netcolors = net$colors
matrix<- data.frame(cbind(geneID, netcolors))
shiny::runApp('~/Desktop/GeneCoexpression/RGUI_v5')
runApp('~/Desktop/GeneCoexpression/RGUI_v5')
library(shiny)
library(rsconnect)
library(plyr)
library(data.table)
library(genefilter)
library(Biobase)
library(rPython)
library(WGCNA)
library(GEOquery)
library(dplyr)
library(enrichR)
library(DT)
library(topGO)
library(plyr)
library(data.table)
library(genefilter)
library(Biobase)
library(rPython)
library(WGCNA)
library(GEOquery)
library(dplyr)
library(enrichR)
library(DT)
library(topGO)
gset <- getGEO("GSE17537", GSEMatrix=TRUE, AnnotGPL=FALSE)
install.packages("GEOquery")
install.packages("GEOquery")
shiny::runApp('~/Desktop/GeneCoexpression/RGUI_v5')
net = blockwiseModules(datExpr, power = 6,
TOMType = "unsigned", minModuleSize = 30,     #30,
reassignThreshold = 0, mergeCutHeight =  0.25,    # 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = FALSE,
saveTOMFileBase = "femaleMouseTOM",
verbose = 3)
