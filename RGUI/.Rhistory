pdata$taxid_ch1
pdata$scan_protocol
pdata$data_processing
names(pdata)
pdata$`overall survival follow-up time:ch1`
pdata$supplementary_file
names(pdata)
pdata$extract_protocol_ch1
names(pdata)
gset
gset$Annotation
gset
gset$`ethnicity:ch1`
gset$annotation
View(gset)
gset[1]
gset[2]
gset[[1]]
gset[[2]]
gset[[3]]
gset[[4]]
gset[[5]]
gset[[6]]
gset[[7]]
gset[1,1]
gset[1,2]
gset[2,2]
edata$annotation
annotation(gset)
edata
dim(edata)
dim(edata)[1]
print(sprintf("Number of Samples: ",dim(edata)[2]-1))
dim(edata)[2]
dim(edata)[2]-1
print(sprintf("Annotation Platform: %s",annotation(gset)))
print(sprintf("Number of Genes: %d",dim(edata)[1]))
print(sprintf("Number of Samples: %d",dim(edata)[2]-1))
runApp('Desktop/GeneCoexpression/RGUI')
edata(1:4,1:$)
edata(1:4,1:5)
edata(1:4,1:5)
edata[1:4,1:3]
protocolData(geset)
protocolData(gset)
description(gset)
notes(gset)
storageMode(gset)
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
gset
Meta(gset)
GPLList
GPLList(GPL579)
GPLList(GPL570)
GPLList("GPL570")
GPLList(gset)
GPLList(eset)
GPLList(edata)
GDS2MA(gset,GPL="GPL570")
getGEO("GPL570")
gpl <- getGEO('GPL570')
Meta(gpl)$title
Meta(gpl)
gpl
gpl
gpl$Gene
gpl[1,1]
gpl[1]
Meta(gpl)
gpl$Gene.Symbol
fData(data)
GPLList(gpl)
pData(gpl)
Table(gpl)
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
gpltable[1,]
gpltable%ID
gpltable$ID
gpltable$`Gene Symbol`
gpltable$ID
which(gpltable$ID == "1553559_at")
gpltable[953,]
gpltable[idx,]$`Gene Symbol`
idx
idx <- which(gpltable$ID == "1553559_at")
gpltable[idx,]$`Gene Symbol`
gpltable[953,]
gpltable[idx,]$`Gene Symbol`
edata
fname
row.names(data)
fname
length(fname)
fname[1]
for (i in 1:length(fname)){
which(gpltable$ID == fname[i])
}
runApp('Desktop/GeneCoexpression/RGUI')
shiny::runApp('Desktop/GeneCoexpression/RGUI')
myGSE = "GSE17537"
t <- try(gset <- getGEO(myGSE, GSEMatrix=TRUE, AnnotGPL=FALSE)) #AnnotGPL default is FALSE
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
edata <- exprs(gset) #This is the expression matrix
# pdata <- pData(gset) # data.frame of phenotypic information.
fname <<- featureNames(gset) # e.g. 12345_at
data <<- cbind(fname, edata)
fname
try(gpl <- getGEO('GPL570'))
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
"1553559_at"
fname
which(gpltable$ID == fname[i])
which(gpltable$ID == fname[1])
which(gpltable$ID == fname[1])
fname[1]
fname
fname[1]
gpltable$ID[1]
fname2 <- fname
for (i in 1:length(fname)){
fname2[i] <- gpltable$ID[which(gpltable$ID == fname[i])]
}
fname[1:5,]
fname[1:5]
fname2[1:5]
gpltable$`Gene Symbol
gpltable$`Gene Symbol`
gpltable$`Gene Symbol`[1]
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
fname2
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
edata
edata[1:4,1:4]
fname2
# pdata <- pData(gset) # data.frame of phenotypic information.
fname <<- featureNames(gset) # e.g. 12345_at
data <<- cbind(fname, edata)
data <- cbind(fname, edata)
row.names(data) <- seq(1, length(fname))
data[1:4,1:4]
data[1:4,1]
data2 = data
data2[,1] <<- fname2
data2[,1] <- fname2
data2[1:4,1:4]
data2[1:40,1:4]
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
fname2
fname3 = fname2
fname3[!grepl("", fname3),]
fname3[!grepl("", fname3)]
grepl("", fname3)
strn("")
nchar("")
nchar("asd")
subset(fname3, nchar(fname) <= 3)
nchar(fname)
subset(fname3, nchar(fname3) <= 3)
fname2
finalSymCharTable <- table(fname2)
finalSymCharTable
length(fname2)
length(finalSymCharTable)
finalSymCharTable[2]
finalSymCharTable[2]$val
finalSymCharTable[2]
finalSymCharTable[2]>1
finalSymCharTable[2]$name
ans <- finalSymCharTable[2]
as.numeric(finalSymCharTable[2])
as.numeric(finalSymCharTable[2]) > 1
colnames((finalSymCharTable[2]))
colnames(finalSymCharTable[2])
name(finalSymCharTable[2])
names(finalSymCharTable[2])
genename <- names(finalSymCharTable[2])
genename
row2remove <- list()
which(fname == genename)
which(fname2 == genename)
which(fname2 == genename)
ansx <- c(1,5,4,5,5,8,4,6)
which(ansx ==5)
fname2[39074]
finalSymCharTable[5]
finalSymCharTable[6]
finalSymCharTable[7]
finalSymCharTable[723]
finalSymCharTable[7234]
finalSymCharTable[72234]
finalSymCharTable[12234]
finalSymCharTable[1234]
genename <- names(finalSymCharTable[1234])
genename
which(finalSymChar == genename)
which(fname3 == genename)
for (idx in which(fname2 == genename)){
print(idx)
}
finalExp[1686,]
edata[1686,]
edata[which(fname2 == genename),]
dim(edata[which(fname2 == genename),])
rowMeans(edata[which(fname2 == genename),])
which.is.max(rowMeans(edata[which(fname2 == genename),]))
which.max(rowMeans(edata[which(fname2 == genename),]))
which(fname2 == genename)
which(fname2 == genename)[2]
which(fname2 == genename)[-2]
c(row2remove, 1)
c(row2remove, 2)
row2remove <- c(row2remove, 2)
row2remove <- c(row2remove, 3)
row2remove
row2remove = matrix(nrow=0, ncol=0)
row2remove
row2remove = array()
row2remove
row2remove <- c(row2remove, 3)
row2remove <- c(row2remove, 4)
row2remove
row2remove<- character()
row2remove
row2remove <- c(row2remove, 4)
row2remove
row2remove <- c(row2remove, 3)
row2remove
row2remove<- number()
row2remove<- numeric()
row2remove <- c(row2remove, 3)
row2remove <- c(row2remove, 4)
row2remove
row2remove<- numeric()
row2remove <- c(row2remove, which(fname2 == genename))
row2remove
edata
edata2 = edata[1:4,1:4]
edata2
row2remove <- c(row2remove, 2)
row2remove <- c(row2remove, 3)
row2remove
row2remove <- numeric()
row2remove <- c(row2remove, 3)
row2remove <- c(row2remove, 2)
row2remove
edata2
edata2[-row2remove]
edata2[-row2remove,]
runApp('Desktop/GeneCoexpression/RGUI')
print(sprintf("data dimension after remove gene with empty symbol: %d x %d"),1,2)
print(sprintf("data dimension after remove gene with empty symbol: %d x %d"),1)
print(sprintf("data dimension after remove gene with empty symbol: %d x %d"),1,2,3)
print(sprintf("data dimension after remove gene with empty symbol: %d%d"),1,2)
print(sprintf("data dimension after remove gene with empty symbol: %s%s"),1,2)
print(sprintf("data dimension after remove gene with empty symbol: %s"),1)
print(sprintf("data dimension after remove gene with empty symbol: %d"),1)
print(sprintf("data dimension after remove gene with empty symbol: %d x %d",1,2))
runApp('Desktop/GeneCoexpression/RGUI')
runApp('Desktop/GeneCoexpression/RGUI')
edata <- exprs(gset) #This is the expression matrix
# pdata <- pData(gset) # data.frame of phenotypic information.
fname <<- featureNames(gset) # e.g. 12345_at
data <<- cbind(fname, edata)
data <- cbind(fname, edata)
row.names(data) <- seq(1, length(fname))
row.names(data) <<- seq(1, length(fname))
RNA = edata
print(dim(RNA))
geneID = fname
print(dim(geneID))
print(dim(geneID))
fname
# Remove data with lowest 20% absolute exp value shared by all samples
percentile <- input$absolute_expval/100.
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, 0.2)[[1]], ]
percentile = 0.
percentile = 0.1
index <- varFilter2(eset = RNA_filtered1, var.cutoff = percentile)
RNA_filtered2 = RNA_filtered1[index, ]
expData
expData <- RNA_filtered2
res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
geneID <- data.frame(data[1:dim(data)[1], 1])
print(dim(geneID))
percentile = 0.2
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
percentile = 0.1
geneID_filtered2 = geneID_filtered1[index]
expData <- RNA_filtered2
res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
ind1 <- res$first
uniGene <- as.character(res$second)
tmpExp <- expData[ind1,]
rowMeans(tmpExp)
uniGene <- subset(uniGene, nchar(uniGene) > 0)
tmpExp <- subset(tmpExp, nchar(uniGene) > 0)
dim(tmpExp)
row2remove <- numeric()
finalSymCharTable <- table(uniGene)
print(tmpExp[1:4,1:4])
for (i in 1:length(finalSymCharTable)){
if (as.numeric(finalSymCharTable[i]) > 1){ # if exist duplicated Gene
genename <- names(finalSymCharTable[i])
idx_with_max_mean <- which.max(rowMeans(tmpExp[which(uniGene == genename),]))
row2remove <- c( row2remove, (which(uniGene == genename)[-idx_with_max_mean]) )
}
}
tmpExp <- tmpExp[-row2remove]
uniGene <- uniGene[-row2remove]
print(sprintf("data dimension after remove duplicated gene symbol: %d x %d",dim(tmpExp)[1],dim(tmpExp)[2]))
dim(tmpExp)
length(row2remove)
finalSymCharTable
finalSymCharTable[-0]
t <- try(gset <- getGEO("GSE17537", GSEMatrix=TRUE, AnnotGPL=FALSE)) #AnnotGPL default is FALSE
edata <- exprs(gset) #This is the expression matrix
# pdata <- pData(gset) # data.frame of phenotypic information.
fname <<- featureNames(gset) # e.g. 12345_at
data <- cbind(fname, edata)
row.names(data) <<- seq(1, length(fname))
row.names(data) <- seq(1, length(fname))
print(dim(data))
# Step 0
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
class(RNA) <- "numeric"
geneID <- data.frame(data[1:dim(data)[1], 1])
print(dim(RNA))
print(dim(geneID))
percentile = 0.2
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
print(dim(RNA))
print(dim(geneID))
percentile = 0.1
index <- varFilter2(eset = RNA_filtered1, var.cutoff = percentile)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
dim(RNA_filtered2)
expData <- RNA_filtered2
res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
ind1 <- res$first
uniGene <- as.character(res$second)
tmpExp <- expData[ind1,]
tmpExp[1:3,1:4]
row2remove <- numeric()
finalSymCharTable <- table(uniGene)
print(tmpExp[1:4,1:4])
finalSymCharTable
length(finalSymCharTable)
try(gpl <- getGEO("GPL570"))
#https://www.rdocumentation.org/packages/GEOquery/versions/2.38.4/topics/GEOData-class
gpltable <- Table(gpl)
fname2 <- fname
for (i in 1:length(fname)){
fname2[i] <- gpltable$`Gene Symbol`[which(gpltable$ID == fname[i])]
}
print(dim(data))
print(length(fname2))
data[,1] <<- fname2
row.names(data) <- seq(1, length(fname2))
# Step 0
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
data[1:3,1:4]
fname2
data[,1] <<- fname2
data[,1] <- fname2
data[1:3,1:4]
# Step 0
RNA <- as.matrix(data[1:dim(data)[1], 2:dim(data)[2]])
RNA[1:2,1:4]
class(RNA) <- "numeric"
geneID <- data.frame(data[1:dim(data)[1], 1])
print(dim(RNA))
print(dim(geneID))
geneID
percentile=.2
RNA_filtered1 = RNA[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
percentile=.1
index <- varFilter2(eset = RNA_filtered1, var.cutoff = percentile)
RNA_filtered2 = RNA_filtered1[index, ]
geneID_filtered2 = geneID_filtered1[index]
expData <- RNA_filtered2
res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
ind1 <- res$first
uniGene <- as.character(res$second)
tmpExp <- expData[ind1,]
dim(tmpExp)
uniGene
dim(expData)
dim(res)
dim(res)
dim(uniGene)
dim(tmpExp)
expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
res <- expData
ind1 <- res$first
dim(geneID_filtered2)
dim(RNA_filtered2)
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
uniGene
row2remove <- numeric()
finalSymCharTable <- table(uniGene)
finalSymCharTable
print(tmpExp[1:4,1:4])
for (i in 1:length(finalSymCharTable)){
if (as.numeric(finalSymCharTable[i]) > 1){ # if exist duplicated Gene
genename <- names(finalSymCharTable[i])
idx_with_max_mean <- which.max(rowMeans(tmpExp[which(uniGene == genename),]))
row2remove <- c( row2remove, (which(uniGene == genename)[-idx_with_max_mean]) )
}
}
row2remove
dim(tmpExp)
tmpExp <- tmpExp[-row2remove]
uniGene <- uniGene[-row2remove]
dim(tmpExp)
tmpExp
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
tmpExp <- tmpExp[-row2remove,]
uniGene <- uniGene[-row2remove]
dim(tmpExp)
length(uniGene)
tmpExp
tmpExp[-0]
tmpExp[-0,]
nSample <- ncol(tmpExp)
nSample
res <- sort.int(rowMeans(tmpExp), decreasing = TRUE, index.return=TRUE)
sortMean <- res$x
sortInd <- res$ix
topN <- min(input$max_gene_retain, nrow(tmpExp))
topN = 20000
finalExp <<- tmpExp[sortInd[1:topN], ]
print(nrow(tmpExp))
finalSym <<- uniGene[sortInd[1:topN]]
finalSym
finalSymChar <<- as.character(finalSym)
row2remove <- numeric()
row2remove = c(row2remove, 0)
row2remove
tmpExp
tmpExp <- tmpExp[-row2remove,]
tmpExp
# expData <- RNA_filtered2
# res <- highExpressionProbes(geneID_filtered2, geneID_filtered2, expData)
# ind1 <- res$first
# uniGene <- as.character(res$second)
# tmpExp <- expData[ind1,]
uniGene <- geneID_filtered2
tmpExp <- RNA_filtered2
fname
row2remove <- numeric()
finalSymCharTable <- table(fname)
for (i in 1:length(finalSymCharTable)){
if (as.numeric(finalSymCharTable[i]) > 1){ # if exist duplicated Gene
genename <- names(finalSymCharTable[i])
idx_with_max_mean <- which.max(rowMeans(tmpExp[which(fname == genename),]))
print(idx_with_max_mean)
row2remove <- c( row2remove, (which(fname == genename)[-idx_with_max_mean]) )
}
}
row2remove
row2remove
tmpExp
tmpExp <- tmpExp[-row2remove,]
tmpExp
length(row2remove)
runApp('Desktop/GeneCoexpression/RGUI')
uniGene
nchar(as.character(uniGene))
runApp('Desktop/GeneCoexpression/RGUI')
